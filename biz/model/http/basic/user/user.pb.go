// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v5.29.1
// source: http/user.proto

package user

import (
	_ "github.com/qingyggg/aufer/biz/model/http/api"
	common "github.com/qingyggg/aufer/biz/model/http/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar          string `protobuf:"bytes,1,opt,name=avatar,proto3" form:"avatar" json:"avatar" query:"avatar"`                                                              // user avatar URL
	BackgroundImage string `protobuf:"bytes,2,opt,name=background_image,json=backgroundImage,proto3" form:"background_image" json:"background_image" query:"background_image"` // image at the top of the user's personal page
	Signature       string `protobuf:"bytes,3,opt,name=signature,proto3" form:"signature" json:"signature" query:"signature"`                                                  // user profile
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" form:"name" json:"name" query:"name"`                                                                      // user name
	Uid             string `protobuf:"bytes,5,opt,name=uid,proto3" form:"uid" json:"uid" query:"uid"`                                                                          //hash id
	CreatedDate     string `protobuf:"bytes,6,opt,name=created_date,json=createdDate,proto3" form:"created_date" json:"created_date" query:"created_date"`
	Email           string `protobuf:"bytes,7,opt,name=email,proto3" form:"email" json:"email" query:"email"`
}

func (x *UserBase) Reset() {
	*x = UserBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBase) ProtoMessage() {}

func (x *UserBase) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBase.ProtoReflect.Descriptor instead.
func (*UserBase) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserBase) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserBase) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *UserBase) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UserBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserBase) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserBase) GetCreatedDate() string {
	if x != nil {
		return x.CreatedDate
	}
	return ""
}

func (x *UserBase) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowCount    int64 `protobuf:"varint,1,opt,name=follow_count,json=followCount,proto3" form:"follow_count" json:"follow_count" query:"follow_count"`                // total number of people the user follows
	FollowerCount  int64 `protobuf:"varint,2,opt,name=follower_count,json=followerCount,proto3" form:"follower_count" json:"follower_count" query:"follower_count"`      // total number of fans
	IsFollow       bool  `protobuf:"varint,3,opt,name=is_follow,json=isFollow,proto3" form:"is_follow" json:"is_follow" query:"is_follow"`                               // whether the currently logged-in user follows this user
	TotalFavorited int64 `protobuf:"varint,4,opt,name=total_favorited,json=totalFavorited,proto3" form:"total_favorited" json:"total_favorited" query:"total_favorited"` // number of articles for articles published by user
	WorkCount      int64 `protobuf:"varint,5,opt,name=work_count,json=workCount,proto3" form:"work_count" json:"work_count" query:"work_count"`                          // number of articles published by user
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfo) GetFollowCount() int64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *UserInfo) GetFollowerCount() int64 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *UserInfo) GetIsFollow() bool {
	if x != nil {
		return x.IsFollow
	}
	return false
}

func (x *UserInfo) GetTotalFavorited() int64 {
	if x != nil {
		return x.TotalFavorited
	}
	return 0
}

func (x *UserInfo) GetWorkCount() int64 {
	if x != nil {
		return x.WorkCount
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *UserBase `protobuf:"bytes,1,opt,name=base,proto3" form:"base" json:"base" query:"base"`
	Info *UserInfo `protobuf:"bytes,2,opt,name=info,proto3" form:"info" json:"info" query:"info"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetBase() *UserBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *User) GetInfo() *UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type LoginOrRegRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" form:"email" json:"email,required" query:"email" vd:"email($)"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" form:"password" json:"password,required" query:"password" vd:"password($)"`
}

func (x *LoginOrRegRequest) Reset() {
	*x = LoginOrRegRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginOrRegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginOrRegRequest) ProtoMessage() {}

func (x *LoginOrRegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginOrRegRequest.ProtoReflect.Descriptor instead.
func (*LoginOrRegRequest) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{3}
}

func (x *LoginOrRegRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginOrRegRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type PwdModRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewPassword string `protobuf:"bytes,1,opt,name=new_password,json=newPassword,proto3" form:"new_password" json:"new_password,required" query:"new_password" vd:"password($)"`
	OldPassword string `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" form:"old_password" json:"old_password,required" query:"old_password" vd:"password($)"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" form:"email" json:"email,required" query:"email" vd:"email($)"`
}

func (x *PwdModRequest) Reset() {
	*x = PwdModRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PwdModRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PwdModRequest) ProtoMessage() {}

func (x *PwdModRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PwdModRequest.ProtoReflect.Descriptor instead.
func (*PwdModRequest) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{4}
}

func (x *PwdModRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *PwdModRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *PwdModRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ProfileModRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar          string `protobuf:"bytes,1,opt,name=avatar,proto3" form:"avatar" json:"avatar" query:"avatar"`                                                              // user avatar URL
	BackgroundImage string `protobuf:"bytes,2,opt,name=background_image,json=backgroundImage,proto3" form:"background_image" json:"background_image" query:"background_image"` // image at the top of the user's personal page
	Signature       string `protobuf:"bytes,3,opt,name=signature,proto3" form:"signature" json:"signature" query:"signature"`                                                  // user profile
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" form:"name" json:"name" query:"name"`                                                                      // user name
}

func (x *ProfileModRequest) Reset() {
	*x = ProfileModRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileModRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileModRequest) ProtoMessage() {}

func (x *ProfileModRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileModRequest.ProtoReflect.Descriptor instead.
func (*ProfileModRequest) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileModRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ProfileModRequest) GetBackgroundImage() string {
	if x != nil {
		return x.BackgroundImage
	}
	return ""
}

func (x *ProfileModRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ProfileModRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   string `protobuf:"bytes,1,opt,name=uid,proto3" form:"uid" json:"uid" query:"uid,required"`
	MyUid string `protobuf:"bytes,2,opt,name=myUid,proto3" default:"guest" form:"myUid" json:"myUid" query:"my_uid"`
}

func (x *UserRequest) Reset() {
	*x = UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRequest) ProtoMessage() {}

func (x *UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRequest.ProtoReflect.Descriptor instead.
func (*UserRequest) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{6}
}

func (x *UserRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserRequest) GetMyUid() string {
	if x != nil {
		return x.MyUid
	}
	return ""
}

type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *common.BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" form:"base" json:"base" query:"base"`
	User *User                `protobuf:"bytes,2,opt,name=user,proto3" form:"user" json:"user" query:"user"` // User Info
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{7}
}

func (x *UserResponse) GetBase() *common.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UserBaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *common.BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" form:"base" json:"base" query:"base"`
	User *UserBase            `protobuf:"bytes,2,opt,name=user,proto3" form:"user" json:"user" query:"user"`
}

func (x *UserBaseResponse) Reset() {
	*x = UserBaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseResponse) ProtoMessage() {}

func (x *UserBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseResponse.ProtoReflect.Descriptor instead.
func (*UserBaseResponse) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{8}
}

func (x *UserBaseResponse) GetBase() *common.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserBaseResponse) GetUser() *UserBase {
	if x != nil {
		return x.User
	}
	return nil
}

type UserBasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *common.BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" form:"base" json:"base" query:"base"`
	UserMap map[string]*UserBase `protobuf:"bytes,2,rep,name=userMap,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" form:"userMap" json:"userMap" query:"userMap"`
}

func (x *UserBasesResponse) Reset() {
	*x = UserBasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBasesResponse) ProtoMessage() {}

func (x *UserBasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBasesResponse.ProtoReflect.Descriptor instead.
func (*UserBasesResponse) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{9}
}

func (x *UserBasesResponse) GetBase() *common.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserBasesResponse) GetUserMap() map[string]*UserBase {
	if x != nil {
		return x.UserMap
	}
	return nil
}

type UserActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *common.BaseResponse `protobuf:"bytes,1,opt,name=base,proto3" form:"base" json:"base" query:"base"`
	Uid  string               `protobuf:"bytes,2,opt,name=uid,proto3" form:"uid" json:"uid" query:"uid"`
	Puid int64                `protobuf:"varint,3,opt,name=puid,proto3" form:"puid" json:"puid" query:"puid"` //用以存储cookie的user主键
}

func (x *UserActionResponse) Reset() {
	*x = UserActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionResponse) ProtoMessage() {}

func (x *UserActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_http_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionResponse.ProtoReflect.Descriptor instead.
func (*UserActionResponse) Descriptor() ([]byte, []int) {
	return file_http_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserActionResponse) GetBase() *common.BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UserActionResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UserActionResponse) GetPuid() int64 {
	if x != nil {
		return x.Puid
	}
	return 0
}

var File_http_user_proto protoreflect.FileDescriptor

var file_http_user_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x0e, 0x68, 0x74,
	0x74, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xca, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xb9, 0x01, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x52, 0x65,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xda, 0xbb, 0x18, 0x08, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x28, 0x24, 0x29, 0xca, 0xf3, 0x18, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xda, 0xbb, 0x18, 0x0b, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x28, 0x24, 0x29, 0xca, 0xf3, 0x18, 0x18, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xf4,
	0x01, 0x0a, 0x0d, 0x50, 0x77, 0x64, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xda, 0xbb, 0x18, 0x0b, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x28, 0x24, 0x29, 0xca, 0xf3, 0x18, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xda, 0xbb, 0x18, 0x0b,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x28, 0x24, 0x29, 0xca, 0xf3, 0x18, 0x1c, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x0b, 0x6f, 0x6c, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xda, 0xbb, 0x18, 0x08, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x28, 0x24, 0x29, 0xca, 0xf3, 0x18, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x73, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xca, 0xf3,
	0x18, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x22, 0x75, 0x69, 0x64, 0x2c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x6d,
	0x79, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xca, 0xf3, 0x18, 0x1e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x22, 0x6d, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x22, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x67, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x05,
	0x6d, 0x79, 0x55, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a,
	0x4f, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x69, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x75, 0x69, 0x64, 0x32, 0xd3, 0x03, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0xca, 0xc1, 0x18, 0x05, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x5f, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4f, 0x72, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0xd2, 0xc1,
	0x18, 0x0e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x59, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f,
	0x72, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0xd2, 0xc1, 0x18, 0x0b,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x18, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x77, 0x64, 0x4d, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0xd2, 0xc1, 0x18, 0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x70, 0x77, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x12, 0x67, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0xd2, 0xc1, 0x18, 0x11,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x71, 0x69, 0x6e, 0x67, 0x79, 0x67, 0x67, 0x67, 0x2f, 0x61, 0x75, 0x66, 0x65, 0x72, 0x2f, 0x62,
	0x69, 0x7a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_http_user_proto_rawDescOnce sync.Once
	file_http_user_proto_rawDescData = file_http_user_proto_rawDesc
)

func file_http_user_proto_rawDescGZIP() []byte {
	file_http_user_proto_rawDescOnce.Do(func() {
		file_http_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_http_user_proto_rawDescData)
	})
	return file_http_user_proto_rawDescData
}

var file_http_user_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_http_user_proto_goTypes = []interface{}{
	(*UserBase)(nil),            // 0: http.user.UserBase
	(*UserInfo)(nil),            // 1: http.user.UserInfo
	(*User)(nil),                // 2: http.user.User
	(*LoginOrRegRequest)(nil),   // 3: http.user.LoginOrRegRequest
	(*PwdModRequest)(nil),       // 4: http.user.PwdModRequest
	(*ProfileModRequest)(nil),   // 5: http.user.ProfileModRequest
	(*UserRequest)(nil),         // 6: http.user.UserRequest
	(*UserResponse)(nil),        // 7: http.user.UserResponse
	(*UserBaseResponse)(nil),    // 8: http.user.UserBaseResponse
	(*UserBasesResponse)(nil),   // 9: http.user.UserBasesResponse
	(*UserActionResponse)(nil),  // 10: http.user.UserActionResponse
	nil,                         // 11: http.user.UserBasesResponse.UserMapEntry
	(*common.BaseResponse)(nil), // 12: http.common.BaseResponse
}
var file_http_user_proto_depIdxs = []int32{
	0,  // 0: http.user.User.base:type_name -> http.user.UserBase
	1,  // 1: http.user.User.info:type_name -> http.user.UserInfo
	12, // 2: http.user.UserResponse.base:type_name -> http.common.BaseResponse
	2,  // 3: http.user.UserResponse.user:type_name -> http.user.User
	12, // 4: http.user.UserBaseResponse.base:type_name -> http.common.BaseResponse
	0,  // 5: http.user.UserBaseResponse.user:type_name -> http.user.UserBase
	12, // 6: http.user.UserBasesResponse.base:type_name -> http.common.BaseResponse
	11, // 7: http.user.UserBasesResponse.userMap:type_name -> http.user.UserBasesResponse.UserMapEntry
	12, // 8: http.user.UserActionResponse.base:type_name -> http.common.BaseResponse
	0,  // 9: http.user.UserBasesResponse.UserMapEntry.value:type_name -> http.user.UserBase
	6,  // 10: http.user.UserHandler.User:input_type -> http.user.UserRequest
	3,  // 11: http.user.UserHandler.UserRegister:input_type -> http.user.LoginOrRegRequest
	3,  // 12: http.user.UserHandler.UserLogin:input_type -> http.user.LoginOrRegRequest
	4,  // 13: http.user.UserHandler.UserPwdModify:input_type -> http.user.PwdModRequest
	5,  // 14: http.user.UserHandler.UserProfileModify:input_type -> http.user.ProfileModRequest
	7,  // 15: http.user.UserHandler.User:output_type -> http.user.UserResponse
	10, // 16: http.user.UserHandler.UserRegister:output_type -> http.user.UserActionResponse
	10, // 17: http.user.UserHandler.UserLogin:output_type -> http.user.UserActionResponse
	10, // 18: http.user.UserHandler.UserPwdModify:output_type -> http.user.UserActionResponse
	10, // 19: http.user.UserHandler.UserProfileModify:output_type -> http.user.UserActionResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_http_user_proto_init() }
func file_http_user_proto_init() {
	if File_http_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_http_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginOrRegRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PwdModRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileModRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_http_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_http_user_proto_goTypes,
		DependencyIndexes: file_http_user_proto_depIdxs,
		MessageInfos:      file_http_user_proto_msgTypes,
	}.Build()
	File_http_user_proto = out.File
	file_http_user_proto_rawDesc = nil
	file_http_user_proto_goTypes = nil
	file_http_user_proto_depIdxs = nil
}

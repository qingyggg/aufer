// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package relation

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	common "github.com/qingyggg/aufer/biz/model/cmd/common"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *FollowRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FollowRequest[number], err)
}

func (x *FollowRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FollowRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MyUid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FollowRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListRequest[number], err)
}

func (x *ListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *IsFollowRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsFollowRequest[number], err)
}

func (x *IsFollowRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *IsFollowRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MyUid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserFollowInfoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserFollowInfoRequest[number], err)
}

func (x *UserFollowInfoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserFollowInfoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserFollowInfoResponse[number], err)
}

func (x *UserFollowInfoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FollowerCount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UserFollowInfoResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FollowingCount, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UserFollowInfoResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *IsFollowResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsFollowResponse[number], err)
}

func (x *IsFollowResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *IsFollowResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsFollow, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListResponse[number], err)
}

func (x *ListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *ListResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v user.UserBase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *FollowRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *FollowRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *FollowRequest) fastWriteField2(buf []byte) (offset int) {
	if x.MyUid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMyUid())
	return offset
}

func (x *FollowRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetType())
	return offset
}

func (x *ListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *ListRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetType())
	return offset
}

func (x *IsFollowRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsFollowRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *IsFollowRequest) fastWriteField2(buf []byte) (offset int) {
	if x.MyUid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMyUid())
	return offset
}

func (x *UserFollowInfoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserFollowInfoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *UserFollowInfoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserFollowInfoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.FollowerCount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetFollowerCount())
	return offset
}

func (x *UserFollowInfoResponse) fastWriteField2(buf []byte) (offset int) {
	if x.FollowingCount == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetFollowingCount())
	return offset
}

func (x *UserFollowInfoResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetBase())
	return offset
}

func (x *IsFollowResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsFollowResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *IsFollowResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.IsFollow {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsFollow())
	return offset
}

func (x *ListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *ListResponse) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *FollowRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *FollowRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *FollowRequest) sizeField2() (n int) {
	if x.MyUid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMyUid())
	return n
}

func (x *FollowRequest) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetType())
	return n
}

func (x *ListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *ListRequest) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetType())
	return n
}

func (x *IsFollowRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsFollowRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *IsFollowRequest) sizeField2() (n int) {
	if x.MyUid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMyUid())
	return n
}

func (x *UserFollowInfoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserFollowInfoRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *UserFollowInfoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserFollowInfoResponse) sizeField1() (n int) {
	if x.FollowerCount == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetFollowerCount())
	return n
}

func (x *UserFollowInfoResponse) sizeField2() (n int) {
	if x.FollowingCount == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetFollowingCount())
	return n
}

func (x *UserFollowInfoResponse) sizeField3() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetBase())
	return n
}

func (x *IsFollowResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsFollowResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *IsFollowResponse) sizeField2() (n int) {
	if !x.IsFollow {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsFollow())
	return n
}

func (x *ListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *ListResponse) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

var fieldIDToName_FollowRequest = map[int32]string{
	1: "Uid",
	2: "MyUid",
	3: "Type",
}

var fieldIDToName_ListRequest = map[int32]string{
	1: "Uid",
	2: "Type",
}

var fieldIDToName_IsFollowRequest = map[int32]string{
	1: "Uid",
	2: "MyUid",
}

var fieldIDToName_UserFollowInfoRequest = map[int32]string{
	1: "Uid",
}

var fieldIDToName_UserFollowInfoResponse = map[int32]string{
	1: "FollowerCount",
	2: "FollowingCount",
	3: "Base",
}

var fieldIDToName_IsFollowResponse = map[int32]string{
	1: "Base",
	2: "IsFollow",
}

var fieldIDToName_ListResponse = map[int32]string{
	1: "Base",
	2: "List",
}

var _ = common.File_rpc_common_proto
var _ = user.File_rpc_user_proto

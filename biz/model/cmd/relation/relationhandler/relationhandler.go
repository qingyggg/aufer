// Code generated by Kitex v0.12.3. DO NOT EDIT.

package relationhandler

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	common "github.com/qingyggg/aufer/biz/model/cmd/common"
	"github.com/qingyggg/aufer/biz/model/cmd/relation"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Follow": kitex.NewMethodInfo(
		followHandler,
		newFollowArgs,
		newFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FollowList": kitex.NewMethodInfo(
		followListHandler,
		newFollowListArgs,
		newFollowListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"IsFollow": kitex.NewMethodInfo(
		isFollowHandler,
		newIsFollowArgs,
		newIsFollowResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserFollowInfo": kitex.NewMethodInfo(
		userFollowInfoHandler,
		newUserFollowInfoArgs,
		newUserFollowInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	relationHandlerServiceInfo                = NewServiceInfo()
	relationHandlerServiceInfoForClient       = NewServiceInfoForClient()
	relationHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return relationHandlerServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return relationHandlerServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return relationHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RelationHandler"
	handlerType := (*relation.RelationHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "rpc.relation",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationHandler).Follow(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FollowArgs:
		success, err := handler.(relation.RelationHandler).Follow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFollowArgs() interface{} {
	return &FollowArgs{}
}

func newFollowResult() interface{} {
	return &FollowResult{}
}

type FollowArgs struct {
	Req *relation.FollowRequest
}

func (p *FollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowArgs) Unmarshal(in []byte) error {
	msg := new(relation.FollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowArgs_Req_DEFAULT *relation.FollowRequest

func (p *FollowArgs) GetReq() *relation.FollowRequest {
	if !p.IsSetReq() {
		return FollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowResult struct {
	Success *common.BaseResponse
}

var FollowResult_Success_DEFAULT *common.BaseResponse

func (p *FollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return FollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *FollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowResult) GetResult() interface{} {
	return p.Success
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.ListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationHandler).FollowList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FollowListArgs:
		success, err := handler.(relation.RelationHandler).FollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFollowListArgs() interface{} {
	return &FollowListArgs{}
}

func newFollowListResult() interface{} {
	return &FollowListResult{}
}

type FollowListArgs struct {
	Req *relation.ListRequest
}

func (p *FollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.ListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FollowListArgs) Unmarshal(in []byte) error {
	msg := new(relation.ListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowListArgs_Req_DEFAULT *relation.ListRequest

func (p *FollowListArgs) GetReq() *relation.ListRequest {
	if !p.IsSetReq() {
		return FollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowListResult struct {
	Success *relation.ListResponse
}

var FollowListResult_Success_DEFAULT *relation.ListResponse

func (p *FollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.ListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FollowListResult) Unmarshal(in []byte) error {
	msg := new(relation.ListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowListResult) GetSuccess() *relation.ListResponse {
	if !p.IsSetSuccess() {
		return FollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.ListResponse)
}

func (p *FollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowListResult) GetResult() interface{} {
	return p.Success
}

func isFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.IsFollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationHandler).IsFollow(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *IsFollowArgs:
		success, err := handler.(relation.RelationHandler).IsFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFollowResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newIsFollowArgs() interface{} {
	return &IsFollowArgs{}
}

func newIsFollowResult() interface{} {
	return &IsFollowResult{}
}

type IsFollowArgs struct {
	Req *relation.IsFollowRequest
}

func (p *IsFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.IsFollowRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IsFollowArgs) Unmarshal(in []byte) error {
	msg := new(relation.IsFollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFollowArgs_Req_DEFAULT *relation.IsFollowRequest

func (p *IsFollowArgs) GetReq() *relation.IsFollowRequest {
	if !p.IsSetReq() {
		return IsFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsFollowArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsFollowResult struct {
	Success *relation.IsFollowResponse
}

var IsFollowResult_Success_DEFAULT *relation.IsFollowResponse

func (p *IsFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.IsFollowResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IsFollowResult) Unmarshal(in []byte) error {
	msg := new(relation.IsFollowResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFollowResult) GetSuccess() *relation.IsFollowResponse {
	if !p.IsSetSuccess() {
		return IsFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.IsFollowResponse)
}

func (p *IsFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsFollowResult) GetResult() interface{} {
	return p.Success
}

func userFollowInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.UserFollowInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationHandler).UserFollowInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserFollowInfoArgs:
		success, err := handler.(relation.RelationHandler).UserFollowInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserFollowInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserFollowInfoArgs() interface{} {
	return &UserFollowInfoArgs{}
}

func newUserFollowInfoResult() interface{} {
	return &UserFollowInfoResult{}
}

type UserFollowInfoArgs struct {
	Req *relation.UserFollowInfoRequest
}

func (p *UserFollowInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.UserFollowInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserFollowInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserFollowInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserFollowInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserFollowInfoArgs) Unmarshal(in []byte) error {
	msg := new(relation.UserFollowInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserFollowInfoArgs_Req_DEFAULT *relation.UserFollowInfoRequest

func (p *UserFollowInfoArgs) GetReq() *relation.UserFollowInfoRequest {
	if !p.IsSetReq() {
		return UserFollowInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserFollowInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserFollowInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserFollowInfoResult struct {
	Success *relation.UserFollowInfoResponse
}

var UserFollowInfoResult_Success_DEFAULT *relation.UserFollowInfoResponse

func (p *UserFollowInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.UserFollowInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserFollowInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserFollowInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserFollowInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserFollowInfoResult) Unmarshal(in []byte) error {
	msg := new(relation.UserFollowInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserFollowInfoResult) GetSuccess() *relation.UserFollowInfoResponse {
	if !p.IsSetSuccess() {
		return UserFollowInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserFollowInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.UserFollowInfoResponse)
}

func (p *UserFollowInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserFollowInfoResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Follow(ctx context.Context, Req *relation.FollowRequest) (r *common.BaseResponse, err error) {
	var _args FollowArgs
	_args.Req = Req
	var _result FollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, Req *relation.ListRequest) (r *relation.ListResponse, err error) {
	var _args FollowListArgs
	_args.Req = Req
	var _result FollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollow(ctx context.Context, Req *relation.IsFollowRequest) (r *relation.IsFollowResponse, err error) {
	var _args IsFollowArgs
	_args.Req = Req
	var _result IsFollowResult
	if err = p.c.Call(ctx, "IsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserFollowInfo(ctx context.Context, Req *relation.UserFollowInfoRequest) (r *relation.UserFollowInfoResponse, err error) {
	var _args UserFollowInfoArgs
	_args.Req = Req
	var _result UserFollowInfoResult
	if err = p.c.Call(ctx, "UserFollowInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

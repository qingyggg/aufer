// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package comment

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	"github.com/qingyggg/aufer/biz/model/cmd/common"
	"github.com/qingyggg/aufer/biz/model/cmd/user"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Comment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Comment[number], err)
}

func (x *Comment) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Cid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v user.UserBase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *Comment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.FavoriteCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ChildNum, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.RepliedUid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Comment) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.IsFavorite, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CmtRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CmtRequest[number], err)
}

func (x *CmtRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Pid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CmtRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CmtRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CmtRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Degree, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CmtRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelRequest[number], err)
}

func (x *DelRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Cid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DelRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FavoriteRequest[number], err)
}

func (x *FavoriteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Cid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CardsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CardsRequest[number], err)
}

func (x *CardsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Degree, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.MyUid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CmtCtRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CmtCtRequest[number], err)
}

func (x *CmtCtRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CmtsCtRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CmtsCtRequest[number], err)
}

func (x *CmtsCtRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Aids = append(x.Aids, v)
	return offset, err
}

func (x *CardsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CardsResponse[number], err)
}

func (x *CardsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *CardsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Comment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *CmtActionResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CmtActionResponse[number], err)
}

func (x *CmtActionResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *CmtActionResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CmtCtMapResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CmtCtMapResponse[number], err)
}

func (x *CmtCtMapResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *CmtCtMapResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.CtMap == nil {
		x.CtMap = make(map[string]int64)
	}
	var key string
	var value int64
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.CtMap[key] = value
	return offset, nil
}

func (x *CmtCtResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CmtCtResponse[number], err)
}

func (x *CmtCtResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *CmtCtResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Comment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Comment) fastWriteField1(buf []byte) (offset int) {
	if x.Cid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCid())
	return offset
}

func (x *Comment) fastWriteField2(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAid())
	return offset
}

func (x *Comment) fastWriteField3(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetUser())
	return offset
}

func (x *Comment) fastWriteField4(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetContent())
	return offset
}

func (x *Comment) fastWriteField5(buf []byte) (offset int) {
	if x.CreateDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCreateDate())
	return offset
}

func (x *Comment) fastWriteField6(buf []byte) (offset int) {
	if x.FavoriteCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetFavoriteCount())
	return offset
}

func (x *Comment) fastWriteField7(buf []byte) (offset int) {
	if x.ChildNum == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetChildNum())
	return offset
}

func (x *Comment) fastWriteField8(buf []byte) (offset int) {
	if x.RepliedUid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetRepliedUid())
	return offset
}

func (x *Comment) fastWriteField9(buf []byte) (offset int) {
	if !x.IsFavorite {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetIsFavorite())
	return offset
}

func (x *CmtRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CmtRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Pid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPid())
	return offset
}

func (x *CmtRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAid())
	return offset
}

func (x *CmtRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetContent())
	return offset
}

func (x *CmtRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Degree == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetDegree())
	return offset
}

func (x *CmtRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUid())
	return offset
}

func (x *DelRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *DelRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Cid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCid())
	return offset
}

func (x *DelRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAid())
	return offset
}

func (x *DelRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetType())
	return offset
}

func (x *DelRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetUid())
	return offset
}

func (x *FavoriteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *FavoriteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Cid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCid())
	return offset
}

func (x *FavoriteRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetType())
	return offset
}

func (x *FavoriteRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUid())
	return offset
}

func (x *FavoriteRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAid())
	return offset
}

func (x *CardsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CardsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *CardsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Cid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCid())
	return offset
}

func (x *CardsRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Degree == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetDegree())
	return offset
}

func (x *CardsRequest) fastWriteField4(buf []byte) (offset int) {
	if x.MyUid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMyUid())
	return offset
}

func (x *CmtCtRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CmtCtRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *CmtsCtRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CmtsCtRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.Aids) == 0 {
		return offset
	}
	for i := range x.GetAids() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetAids()[i])
	}
	return offset
}

func (x *CardsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CardsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *CardsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *CmtActionResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CmtActionResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *CmtActionResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Cid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCid())
	return offset
}

func (x *CmtCtMapResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CmtCtMapResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *CmtCtMapResponse) fastWriteField2(buf []byte) (offset int) {
	if x.CtMap == nil {
		return offset
	}
	for k, v := range x.GetCtMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt64(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *CmtCtResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CmtCtResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *CmtCtResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *Comment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Comment) sizeField1() (n int) {
	if x.Cid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCid())
	return n
}

func (x *Comment) sizeField2() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAid())
	return n
}

func (x *Comment) sizeField3() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetUser())
	return n
}

func (x *Comment) sizeField4() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetContent())
	return n
}

func (x *Comment) sizeField5() (n int) {
	if x.CreateDate == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCreateDate())
	return n
}

func (x *Comment) sizeField6() (n int) {
	if x.FavoriteCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetFavoriteCount())
	return n
}

func (x *Comment) sizeField7() (n int) {
	if x.ChildNum == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetChildNum())
	return n
}

func (x *Comment) sizeField8() (n int) {
	if x.RepliedUid == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetRepliedUid())
	return n
}

func (x *Comment) sizeField9() (n int) {
	if !x.IsFavorite {
		return n
	}
	n += fastpb.SizeBool(9, x.GetIsFavorite())
	return n
}

func (x *CmtRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CmtRequest) sizeField1() (n int) {
	if x.Pid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPid())
	return n
}

func (x *CmtRequest) sizeField2() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAid())
	return n
}

func (x *CmtRequest) sizeField3() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetContent())
	return n
}

func (x *CmtRequest) sizeField4() (n int) {
	if x.Degree == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetDegree())
	return n
}

func (x *CmtRequest) sizeField5() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUid())
	return n
}

func (x *DelRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *DelRequest) sizeField1() (n int) {
	if x.Cid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCid())
	return n
}

func (x *DelRequest) sizeField2() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAid())
	return n
}

func (x *DelRequest) sizeField3() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetType())
	return n
}

func (x *DelRequest) sizeField4() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetUid())
	return n
}

func (x *FavoriteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *FavoriteRequest) sizeField1() (n int) {
	if x.Cid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCid())
	return n
}

func (x *FavoriteRequest) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetType())
	return n
}

func (x *FavoriteRequest) sizeField3() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUid())
	return n
}

func (x *FavoriteRequest) sizeField4() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAid())
	return n
}

func (x *CardsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CardsRequest) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *CardsRequest) sizeField2() (n int) {
	if x.Cid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCid())
	return n
}

func (x *CardsRequest) sizeField3() (n int) {
	if x.Degree == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetDegree())
	return n
}

func (x *CardsRequest) sizeField4() (n int) {
	if x.MyUid == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMyUid())
	return n
}

func (x *CmtCtRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CmtCtRequest) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *CmtsCtRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CmtsCtRequest) sizeField1() (n int) {
	if len(x.Aids) == 0 {
		return n
	}
	for i := range x.GetAids() {
		n += fastpb.SizeString(1, x.GetAids()[i])
	}
	return n
}

func (x *CardsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CardsResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *CardsResponse) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *CmtActionResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CmtActionResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *CmtActionResponse) sizeField2() (n int) {
	if x.Cid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCid())
	return n
}

func (x *CmtCtMapResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CmtCtMapResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *CmtCtMapResponse) sizeField2() (n int) {
	if x.CtMap == nil {
		return n
	}
	for k, v := range x.GetCtMap() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeInt64(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *CmtCtResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CmtCtResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *CmtCtResponse) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

var fieldIDToName_Comment = map[int32]string{
	1: "Cid",
	2: "Aid",
	3: "User",
	4: "Content",
	5: "CreateDate",
	6: "FavoriteCount",
	7: "ChildNum",
	8: "RepliedUid",
	9: "IsFavorite",
}

var fieldIDToName_CmtRequest = map[int32]string{
	1: "Pid",
	2: "Aid",
	3: "Content",
	4: "Degree",
	5: "Uid",
}

var fieldIDToName_DelRequest = map[int32]string{
	1: "Cid",
	2: "Aid",
	3: "Type",
	4: "Uid",
}

var fieldIDToName_FavoriteRequest = map[int32]string{
	1: "Cid",
	2: "Type",
	3: "Uid",
	4: "Aid",
}

var fieldIDToName_CardsRequest = map[int32]string{
	1: "Aid",
	2: "Cid",
	3: "Degree",
	4: "MyUid",
}

var fieldIDToName_CmtCtRequest = map[int32]string{
	1: "Aid",
}

var fieldIDToName_CmtsCtRequest = map[int32]string{
	1: "Aids",
}

var fieldIDToName_CardsResponse = map[int32]string{
	1: "Base",
	2: "List",
}

var fieldIDToName_CmtActionResponse = map[int32]string{
	1: "Base",
	2: "Cid",
}

var fieldIDToName_CmtCtMapResponse = map[int32]string{
	1: "Base",
	2: "CtMap",
}

var fieldIDToName_CmtCtResponse = map[int32]string{
	1: "Base",
	2: "Count",
}

var _ = common.File_rpc_common_proto
var _ = user.File_rpc_user_proto

// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package article

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	"github.com/qingyggg/aufer/biz/model/cmd/common"
	"github.com/qingyggg/aufer/biz/model/cmd/user"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ArticleInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ArticleInfo[number], err)
}

func (x *ArticleInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LikeCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.IsFavorite, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CollectCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ViewedCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.IsCollect, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Note, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.CreatedDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleInfo) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.LastModifiedDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleCard) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ArticleCard[number], err)
}

func (x *ArticleCard) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ArticleInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *ArticleCard) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v user.UserBase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *Article) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Article[number], err)
}

func (x *Article) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ArticleInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *Article) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v user.User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *Article) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PublishRequest[number], err)
}

func (x *PublishRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Note, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PublishRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ModRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ModRequest[number], err)
}

func (x *ModRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Note, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ModRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ModRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ModRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ModRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ModRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DetailRequest[number], err)
}

func (x *DetailRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DetailRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MyUid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CardsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CardsRequest[number], err)
}

func (x *CardsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Offset, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Tags = append(x.Tags, v)
	return offset, err
}

func (x *CardsRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Category, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.IsCollected, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CardsRequest) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.AuthorId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CollectRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CollectRequest[number], err)
}

func (x *CollectRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CollectRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CollectRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DelRequest[number], err)
}

func (x *DelRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DelRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Aid) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Aid[number], err)
}

func (x *Aid) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FavoriteRequest[number], err)
}

func (x *FavoriteRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *FavoriteRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PubOrModActionResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PubOrModActionResponse[number], err)
}

func (x *PubOrModActionResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *PubOrModActionResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Aid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ArticleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ArticleResponse[number], err)
}

func (x *ArticleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *ArticleResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Article
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Article = &v
	return offset, nil
}

func (x *CardsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CardsResponse[number], err)
}

func (x *CardsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *CardsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v ArticleCard
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ArticleExistResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ArticleExistResponse[number], err)
}

func (x *ArticleExistResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *ArticleExistResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Exist, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ArticleInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *ArticleInfo) fastWriteField1(buf []byte) (offset int) {
	if x.LikeCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetLikeCount())
	return offset
}

func (x *ArticleInfo) fastWriteField2(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCommentCount())
	return offset
}

func (x *ArticleInfo) fastWriteField3(buf []byte) (offset int) {
	if !x.IsFavorite {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetIsFavorite())
	return offset
}

func (x *ArticleInfo) fastWriteField4(buf []byte) (offset int) {
	if x.CollectCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetCollectCount())
	return offset
}

func (x *ArticleInfo) fastWriteField5(buf []byte) (offset int) {
	if x.ViewedCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetViewedCount())
	return offset
}

func (x *ArticleInfo) fastWriteField6(buf []byte) (offset int) {
	if !x.IsCollect {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetIsCollect())
	return offset
}

func (x *ArticleInfo) fastWriteField7(buf []byte) (offset int) {
	if x.Note == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetNote())
	return offset
}

func (x *ArticleInfo) fastWriteField8(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetTitle())
	return offset
}

func (x *ArticleInfo) fastWriteField9(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetCoverUrl())
	return offset
}

func (x *ArticleInfo) fastWriteField10(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetAid())
	return offset
}

func (x *ArticleInfo) fastWriteField11(buf []byte) (offset int) {
	if x.CreatedDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetCreatedDate())
	return offset
}

func (x *ArticleInfo) fastWriteField12(buf []byte) (offset int) {
	if x.LastModifiedDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetLastModifiedDate())
	return offset
}

func (x *ArticleCard) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ArticleCard) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetInfo())
	return offset
}

func (x *ArticleCard) fastWriteField2(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAuthor())
	return offset
}

func (x *Article) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Article) fastWriteField1(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetInfo())
	return offset
}

func (x *Article) fastWriteField2(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAuthor())
	return offset
}

func (x *Article) fastWriteField3(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetContent())
	return offset
}

func (x *PublishRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *PublishRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Note == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetNote())
	return offset
}

func (x *PublishRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *PublishRequest) fastWriteField3(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCoverUrl())
	return offset
}

func (x *PublishRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetContent())
	return offset
}

func (x *PublishRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUid())
	return offset
}

func (x *ModRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ModRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Note == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetNote())
	return offset
}

func (x *ModRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *ModRequest) fastWriteField3(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCoverUrl())
	return offset
}

func (x *ModRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetContent())
	return offset
}

func (x *ModRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetAid())
	return offset
}

func (x *ModRequest) fastWriteField6(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetUid())
	return offset
}

func (x *DetailRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DetailRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *DetailRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUid())
	return offset
}

func (x *DetailRequest) fastWriteField3(buf []byte) (offset int) {
	if x.MyUid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMyUid())
	return offset
}

func (x *CardsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *CardsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *CardsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Offset == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetOffset())
	return offset
}

func (x *CardsRequest) fastWriteField3(buf []byte) (offset int) {
	if len(x.Tags) == 0 {
		return offset
	}
	for i := range x.GetTags() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetTags()[i])
	}
	return offset
}

func (x *CardsRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Category == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCategory())
	return offset
}

func (x *CardsRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetType())
	return offset
}

func (x *CardsRequest) fastWriteField6(buf []byte) (offset int) {
	if !x.IsCollected {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetIsCollected())
	return offset
}

func (x *CardsRequest) fastWriteField7(buf []byte) (offset int) {
	if x.AuthorId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetAuthorId())
	return offset
}

func (x *CollectRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CollectRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *CollectRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetType())
	return offset
}

func (x *CollectRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUid())
	return offset
}

func (x *DelRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DelRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *DelRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUid())
	return offset
}

func (x *Aid) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Aid) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *FavoriteRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *FavoriteRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAid())
	return offset
}

func (x *FavoriteRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetType())
	return offset
}

func (x *FavoriteRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUid())
	return offset
}

func (x *PubOrModActionResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PubOrModActionResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *PubOrModActionResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Aid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAid())
	return offset
}

func (x *ArticleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ArticleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *ArticleResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Article == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetArticle())
	return offset
}

func (x *CardsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CardsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *CardsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetList()[i])
	}
	return offset
}

func (x *ArticleExistResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ArticleExistResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *ArticleExistResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.Exist {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetExist())
	return offset
}

func (x *ArticleInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *ArticleInfo) sizeField1() (n int) {
	if x.LikeCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetLikeCount())
	return n
}

func (x *ArticleInfo) sizeField2() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCommentCount())
	return n
}

func (x *ArticleInfo) sizeField3() (n int) {
	if !x.IsFavorite {
		return n
	}
	n += fastpb.SizeBool(3, x.GetIsFavorite())
	return n
}

func (x *ArticleInfo) sizeField4() (n int) {
	if x.CollectCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetCollectCount())
	return n
}

func (x *ArticleInfo) sizeField5() (n int) {
	if x.ViewedCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetViewedCount())
	return n
}

func (x *ArticleInfo) sizeField6() (n int) {
	if !x.IsCollect {
		return n
	}
	n += fastpb.SizeBool(6, x.GetIsCollect())
	return n
}

func (x *ArticleInfo) sizeField7() (n int) {
	if x.Note == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetNote())
	return n
}

func (x *ArticleInfo) sizeField8() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetTitle())
	return n
}

func (x *ArticleInfo) sizeField9() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetCoverUrl())
	return n
}

func (x *ArticleInfo) sizeField10() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetAid())
	return n
}

func (x *ArticleInfo) sizeField11() (n int) {
	if x.CreatedDate == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetCreatedDate())
	return n
}

func (x *ArticleInfo) sizeField12() (n int) {
	if x.LastModifiedDate == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetLastModifiedDate())
	return n
}

func (x *ArticleCard) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ArticleCard) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetInfo())
	return n
}

func (x *ArticleCard) sizeField2() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAuthor())
	return n
}

func (x *Article) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Article) sizeField1() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetInfo())
	return n
}

func (x *Article) sizeField2() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAuthor())
	return n
}

func (x *Article) sizeField3() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetContent())
	return n
}

func (x *PublishRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *PublishRequest) sizeField1() (n int) {
	if x.Note == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetNote())
	return n
}

func (x *PublishRequest) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *PublishRequest) sizeField3() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCoverUrl())
	return n
}

func (x *PublishRequest) sizeField4() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetContent())
	return n
}

func (x *PublishRequest) sizeField5() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUid())
	return n
}

func (x *ModRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ModRequest) sizeField1() (n int) {
	if x.Note == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetNote())
	return n
}

func (x *ModRequest) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *ModRequest) sizeField3() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCoverUrl())
	return n
}

func (x *ModRequest) sizeField4() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetContent())
	return n
}

func (x *ModRequest) sizeField5() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetAid())
	return n
}

func (x *ModRequest) sizeField6() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetUid())
	return n
}

func (x *DetailRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DetailRequest) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *DetailRequest) sizeField2() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUid())
	return n
}

func (x *DetailRequest) sizeField3() (n int) {
	if x.MyUid == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMyUid())
	return n
}

func (x *CardsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *CardsRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *CardsRequest) sizeField2() (n int) {
	if x.Offset == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetOffset())
	return n
}

func (x *CardsRequest) sizeField3() (n int) {
	if len(x.Tags) == 0 {
		return n
	}
	for i := range x.GetTags() {
		n += fastpb.SizeString(3, x.GetTags()[i])
	}
	return n
}

func (x *CardsRequest) sizeField4() (n int) {
	if x.Category == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCategory())
	return n
}

func (x *CardsRequest) sizeField5() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetType())
	return n
}

func (x *CardsRequest) sizeField6() (n int) {
	if !x.IsCollected {
		return n
	}
	n += fastpb.SizeBool(6, x.GetIsCollected())
	return n
}

func (x *CardsRequest) sizeField7() (n int) {
	if x.AuthorId == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetAuthorId())
	return n
}

func (x *CollectRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CollectRequest) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *CollectRequest) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetType())
	return n
}

func (x *CollectRequest) sizeField3() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUid())
	return n
}

func (x *DelRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField3()
	return n
}

func (x *DelRequest) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *DelRequest) sizeField3() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUid())
	return n
}

func (x *Aid) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Aid) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *FavoriteRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *FavoriteRequest) sizeField1() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAid())
	return n
}

func (x *FavoriteRequest) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetType())
	return n
}

func (x *FavoriteRequest) sizeField3() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUid())
	return n
}

func (x *PubOrModActionResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PubOrModActionResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *PubOrModActionResponse) sizeField2() (n int) {
	if x.Aid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAid())
	return n
}

func (x *ArticleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ArticleResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *ArticleResponse) sizeField2() (n int) {
	if x.Article == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetArticle())
	return n
}

func (x *CardsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CardsResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *CardsResponse) sizeField2() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(2, x.GetList()[i])
	}
	return n
}

func (x *ArticleExistResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ArticleExistResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *ArticleExistResponse) sizeField2() (n int) {
	if !x.Exist {
		return n
	}
	n += fastpb.SizeBool(2, x.GetExist())
	return n
}

var fieldIDToName_ArticleInfo = map[int32]string{
	1:  "LikeCount",
	2:  "CommentCount",
	3:  "IsFavorite",
	4:  "CollectCount",
	5:  "ViewedCount",
	6:  "IsCollect",
	7:  "Note",
	8:  "Title",
	9:  "CoverUrl",
	10: "Aid",
	11: "CreatedDate",
	12: "LastModifiedDate",
}

var fieldIDToName_ArticleCard = map[int32]string{
	1: "Info",
	2: "Author",
}

var fieldIDToName_Article = map[int32]string{
	1: "Info",
	2: "Author",
	3: "Content",
}

var fieldIDToName_PublishRequest = map[int32]string{
	1: "Note",
	2: "Title",
	3: "CoverUrl",
	4: "Content",
	5: "Uid",
}

var fieldIDToName_ModRequest = map[int32]string{
	1: "Note",
	2: "Title",
	3: "CoverUrl",
	4: "Content",
	5: "Aid",
	6: "Uid",
}

var fieldIDToName_DetailRequest = map[int32]string{
	1: "Aid",
	2: "Uid",
	3: "MyUid",
}

var fieldIDToName_CardsRequest = map[int32]string{
	1: "Uid",
	2: "Offset",
	3: "Tags",
	4: "Category",
	5: "Type",
	6: "IsCollected",
	7: "AuthorId",
}

var fieldIDToName_CollectRequest = map[int32]string{
	1: "Aid",
	2: "Type",
	3: "Uid",
}

var fieldIDToName_DelRequest = map[int32]string{
	1: "Aid",
	3: "Uid",
}

var fieldIDToName_Aid = map[int32]string{
	1: "Aid",
}

var fieldIDToName_FavoriteRequest = map[int32]string{
	1: "Aid",
	2: "Type",
	3: "Uid",
}

var fieldIDToName_PubOrModActionResponse = map[int32]string{
	1: "Base",
	2: "Aid",
}

var fieldIDToName_ArticleResponse = map[int32]string{
	1: "Base",
	2: "Article",
}

var fieldIDToName_CardsResponse = map[int32]string{
	1: "Base",
	2: "List",
}

var fieldIDToName_ArticleExistResponse = map[int32]string{
	1: "Base",
	2: "Exist",
}

var _ = common.File_rpc_common_proto
var _ = user.File_rpc_user_proto

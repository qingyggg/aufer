// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	common "github.com/qingyggg/aufer/biz/model/cmd/common"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *UserBase) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserBase[number], err)
}

func (x *UserBase) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBase) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BackgroundImage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBase) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Signature, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBase) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBase) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBase) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreatedDate, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBase) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserInfo[number], err)
}

func (x *UserInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FollowCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FollowerCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.IsFollow, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TotalFavorited, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.WorkCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserBase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UserInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Info = &v
	return offset, nil
}

func (x *LoginOrRegRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginOrRegRequest[number], err)
}

func (x *LoginOrRegRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginOrRegRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PwdModRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PwdModRequest[number], err)
}

func (x *PwdModRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PwdModRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PwdModRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProfileModRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ProfileModRequest[number], err)
}

func (x *ProfileModRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProfileModRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BackgroundImage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProfileModRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Signature, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProfileModRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ProfileModRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserRequest[number], err)
}

func (x *UserRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MyUid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserBaseRequestByPuid) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserBaseRequestByPuid[number], err)
}

func (x *UserBaseRequestByPuid) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Puid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserBasesRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserBasesRequest[number], err)
}

func (x *UserBasesRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Uids = append(x.Uids, v)
	return offset, err
}

func (x *UserBaseRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserBaseRequest[number], err)
}

func (x *UserBaseRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserExistRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserExistRequest[number], err)
}

func (x *UserExistRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserExistResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserExistResponse[number], err)
}

func (x *UserExistResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *UserExistResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Exist, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UserResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserResponse[number], err)
}

func (x *UserResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *UserResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *UserBaseResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserBaseResponse[number], err)
}

func (x *UserBaseResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *UserBaseResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UserBase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.User = &v
	return offset, nil
}

func (x *UserBasesResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserBasesResponse[number], err)
}

func (x *UserBasesResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *UserBasesResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.UserMap == nil {
		x.UserMap = make(map[string]*UserBase)
	}
	var key string
	var value *UserBase
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v UserBase
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.UserMap[key] = value
	return offset, nil
}

func (x *UserActionResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserActionResponse[number], err)
}

func (x *UserActionResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v common.BaseResponse
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Base = &v
	return offset, nil
}

func (x *UserActionResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Uid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserActionResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Puid, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserBase) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UserBase) fastWriteField1(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAvatar())
	return offset
}

func (x *UserBase) fastWriteField2(buf []byte) (offset int) {
	if x.BackgroundImage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBackgroundImage())
	return offset
}

func (x *UserBase) fastWriteField3(buf []byte) (offset int) {
	if x.Signature == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSignature())
	return offset
}

func (x *UserBase) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *UserBase) fastWriteField5(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUid())
	return offset
}

func (x *UserBase) fastWriteField6(buf []byte) (offset int) {
	if x.CreatedDate == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetCreatedDate())
	return offset
}

func (x *UserBase) fastWriteField7(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetEmail())
	return offset
}

func (x *UserInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *UserInfo) fastWriteField1(buf []byte) (offset int) {
	if x.FollowCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFollowCount())
	return offset
}

func (x *UserInfo) fastWriteField2(buf []byte) (offset int) {
	if x.FollowerCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFollowerCount())
	return offset
}

func (x *UserInfo) fastWriteField3(buf []byte) (offset int) {
	if !x.IsFollow {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetIsFollow())
	return offset
}

func (x *UserInfo) fastWriteField4(buf []byte) (offset int) {
	if x.TotalFavorited == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotalFavorited())
	return offset
}

func (x *UserInfo) fastWriteField5(buf []byte) (offset int) {
	if x.WorkCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetWorkCount())
	return offset
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.Info == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetInfo())
	return offset
}

func (x *LoginOrRegRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LoginOrRegRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetEmail())
	return offset
}

func (x *LoginOrRegRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *PwdModRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PwdModRequest) fastWriteField1(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetNewPassword())
	return offset
}

func (x *PwdModRequest) fastWriteField2(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOldPassword())
	return offset
}

func (x *PwdModRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetEmail())
	return offset
}

func (x *ProfileModRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ProfileModRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAvatar())
	return offset
}

func (x *ProfileModRequest) fastWriteField2(buf []byte) (offset int) {
	if x.BackgroundImage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetBackgroundImage())
	return offset
}

func (x *ProfileModRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Signature == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSignature())
	return offset
}

func (x *ProfileModRequest) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *ProfileModRequest) fastWriteField5(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetUid())
	return offset
}

func (x *UserRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *UserRequest) fastWriteField2(buf []byte) (offset int) {
	if x.MyUid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMyUid())
	return offset
}

func (x *UserBaseRequestByPuid) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserBaseRequestByPuid) fastWriteField1(buf []byte) (offset int) {
	if x.Puid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPuid())
	return offset
}

func (x *UserBasesRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserBasesRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.Uids) == 0 {
		return offset
	}
	for i := range x.GetUids() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetUids()[i])
	}
	return offset
}

func (x *UserBaseRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserBaseRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *UserExistRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserExistRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUid())
	return offset
}

func (x *UserExistResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserExistResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *UserExistResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.Exist {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetExist())
	return offset
}

func (x *UserResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *UserResponse) fastWriteField2(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetUser())
	return offset
}

func (x *UserBaseResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserBaseResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *UserBaseResponse) fastWriteField2(buf []byte) (offset int) {
	if x.User == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetUser())
	return offset
}

func (x *UserBasesResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserBasesResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *UserBasesResponse) fastWriteField2(buf []byte) (offset int) {
	if x.UserMap == nil {
		return offset
	}
	for k, v := range x.GetUserMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *UserActionResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserActionResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Base == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetBase())
	return offset
}

func (x *UserActionResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Uid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUid())
	return offset
}

func (x *UserActionResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Puid == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPuid())
	return offset
}

func (x *UserBase) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UserBase) sizeField1() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAvatar())
	return n
}

func (x *UserBase) sizeField2() (n int) {
	if x.BackgroundImage == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBackgroundImage())
	return n
}

func (x *UserBase) sizeField3() (n int) {
	if x.Signature == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSignature())
	return n
}

func (x *UserBase) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *UserBase) sizeField5() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUid())
	return n
}

func (x *UserBase) sizeField6() (n int) {
	if x.CreatedDate == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetCreatedDate())
	return n
}

func (x *UserBase) sizeField7() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetEmail())
	return n
}

func (x *UserInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *UserInfo) sizeField1() (n int) {
	if x.FollowCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFollowCount())
	return n
}

func (x *UserInfo) sizeField2() (n int) {
	if x.FollowerCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFollowerCount())
	return n
}

func (x *UserInfo) sizeField3() (n int) {
	if !x.IsFollow {
		return n
	}
	n += fastpb.SizeBool(3, x.GetIsFollow())
	return n
}

func (x *UserInfo) sizeField4() (n int) {
	if x.TotalFavorited == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotalFavorited())
	return n
}

func (x *UserInfo) sizeField5() (n int) {
	if x.WorkCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetWorkCount())
	return n
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.Info == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetInfo())
	return n
}

func (x *LoginOrRegRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LoginOrRegRequest) sizeField1() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetEmail())
	return n
}

func (x *LoginOrRegRequest) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *PwdModRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PwdModRequest) sizeField1() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetNewPassword())
	return n
}

func (x *PwdModRequest) sizeField2() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOldPassword())
	return n
}

func (x *PwdModRequest) sizeField3() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetEmail())
	return n
}

func (x *ProfileModRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ProfileModRequest) sizeField1() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAvatar())
	return n
}

func (x *ProfileModRequest) sizeField2() (n int) {
	if x.BackgroundImage == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetBackgroundImage())
	return n
}

func (x *ProfileModRequest) sizeField3() (n int) {
	if x.Signature == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSignature())
	return n
}

func (x *ProfileModRequest) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *ProfileModRequest) sizeField5() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetUid())
	return n
}

func (x *UserRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *UserRequest) sizeField2() (n int) {
	if x.MyUid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMyUid())
	return n
}

func (x *UserBaseRequestByPuid) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserBaseRequestByPuid) sizeField1() (n int) {
	if x.Puid == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPuid())
	return n
}

func (x *UserBasesRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserBasesRequest) sizeField1() (n int) {
	if len(x.Uids) == 0 {
		return n
	}
	for i := range x.GetUids() {
		n += fastpb.SizeString(1, x.GetUids()[i])
	}
	return n
}

func (x *UserBaseRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserBaseRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *UserExistRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserExistRequest) sizeField1() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUid())
	return n
}

func (x *UserExistResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserExistResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *UserExistResponse) sizeField2() (n int) {
	if !x.Exist {
		return n
	}
	n += fastpb.SizeBool(2, x.GetExist())
	return n
}

func (x *UserResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *UserResponse) sizeField2() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetUser())
	return n
}

func (x *UserBaseResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserBaseResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *UserBaseResponse) sizeField2() (n int) {
	if x.User == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetUser())
	return n
}

func (x *UserBasesResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserBasesResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *UserBasesResponse) sizeField2() (n int) {
	if x.UserMap == nil {
		return n
	}
	for k, v := range x.GetUserMap() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *UserActionResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserActionResponse) sizeField1() (n int) {
	if x.Base == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetBase())
	return n
}

func (x *UserActionResponse) sizeField2() (n int) {
	if x.Uid == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUid())
	return n
}

func (x *UserActionResponse) sizeField3() (n int) {
	if x.Puid == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPuid())
	return n
}

var fieldIDToName_UserBase = map[int32]string{
	1: "Avatar",
	2: "BackgroundImage",
	3: "Signature",
	4: "Name",
	5: "Uid",
	6: "CreatedDate",
	7: "Email",
}

var fieldIDToName_UserInfo = map[int32]string{
	1: "FollowCount",
	2: "FollowerCount",
	3: "IsFollow",
	4: "TotalFavorited",
	5: "WorkCount",
}

var fieldIDToName_User = map[int32]string{
	1: "Base",
	2: "Info",
}

var fieldIDToName_LoginOrRegRequest = map[int32]string{
	1: "Email",
	2: "Password",
}

var fieldIDToName_PwdModRequest = map[int32]string{
	1: "NewPassword",
	2: "OldPassword",
	3: "Email",
}

var fieldIDToName_ProfileModRequest = map[int32]string{
	1: "Avatar",
	2: "BackgroundImage",
	3: "Signature",
	4: "Name",
	5: "Uid",
}

var fieldIDToName_UserRequest = map[int32]string{
	1: "Uid",
	2: "MyUid",
}

var fieldIDToName_UserBaseRequestByPuid = map[int32]string{
	1: "Puid",
}

var fieldIDToName_UserBasesRequest = map[int32]string{
	1: "Uids",
}

var fieldIDToName_UserBaseRequest = map[int32]string{
	1: "Uid",
}

var fieldIDToName_UserExistRequest = map[int32]string{
	1: "Uid",
}

var fieldIDToName_UserExistResponse = map[int32]string{
	1: "Base",
	2: "Exist",
}

var fieldIDToName_UserResponse = map[int32]string{
	1: "Base",
	2: "User",
}

var fieldIDToName_UserBaseResponse = map[int32]string{
	1: "Base",
	2: "User",
}

var fieldIDToName_UserBasesResponse = map[int32]string{
	1: "Base",
	2: "UserMap",
}

var fieldIDToName_UserActionResponse = map[int32]string{
	1: "Base",
	2: "Uid",
	3: "Puid",
}

var _ = common.File_rpc_common_proto

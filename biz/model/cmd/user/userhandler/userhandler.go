// Code generated by Kitex v0.12.3. DO NOT EDIT.

package userhandler

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	"github.com/qingyggg/aufer/biz/model/cmd/user"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"User": kitex.NewMethodInfo(
		userHandler,
		newUserArgs,
		newUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryUserBases": kitex.NewMethodInfo(
		queryUserBasesHandler,
		newQueryUserBasesArgs,
		newQueryUserBasesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryUserBase": kitex.NewMethodInfo(
		queryUserBaseHandler,
		newQueryUserBaseArgs,
		newQueryUserBaseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryUserBaseByPuid": kitex.NewMethodInfo(
		queryUserBaseByPuidHandler,
		newQueryUserBaseByPuidArgs,
		newQueryUserBaseByPuidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserRegister": kitex.NewMethodInfo(
		userRegisterHandler,
		newUserRegisterArgs,
		newUserRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserLogin": kitex.NewMethodInfo(
		userLoginHandler,
		newUserLoginArgs,
		newUserLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserPwdModify": kitex.NewMethodInfo(
		userPwdModifyHandler,
		newUserPwdModifyArgs,
		newUserPwdModifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserProfileModify": kitex.NewMethodInfo(
		userProfileModifyHandler,
		newUserProfileModifyArgs,
		newUserProfileModifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserExist": kitex.NewMethodInfo(
		userExistHandler,
		newUserExistArgs,
		newUserExistResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userHandlerServiceInfo                = NewServiceInfo()
	userHandlerServiceInfoForClient       = NewServiceInfoForClient()
	userHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userHandlerServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userHandlerServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserHandler"
	handlerType := (*user.UserHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "rpc.user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func userHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).User(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserArgs:
		success, err := handler.(user.UserHandler).User(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserArgs() interface{} {
	return &UserArgs{}
}

func newUserResult() interface{} {
	return &UserResult{}
}

type UserArgs struct {
	Req *user.UserRequest
}

func (p *UserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserArgs) Unmarshal(in []byte) error {
	msg := new(user.UserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserArgs_Req_DEFAULT *user.UserRequest

func (p *UserArgs) GetReq() *user.UserRequest {
	if !p.IsSetReq() {
		return UserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserResult struct {
	Success *user.UserResponse
}

var UserResult_Success_DEFAULT *user.UserResponse

func (p *UserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserResult) Unmarshal(in []byte) error {
	msg := new(user.UserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserResult) GetSuccess() *user.UserResponse {
	if !p.IsSetSuccess() {
		return UserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserResponse)
}

func (p *UserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserResult) GetResult() interface{} {
	return p.Success
}

func queryUserBasesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserBasesRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).QueryUserBases(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryUserBasesArgs:
		success, err := handler.(user.UserHandler).QueryUserBases(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryUserBasesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryUserBasesArgs() interface{} {
	return &QueryUserBasesArgs{}
}

func newQueryUserBasesResult() interface{} {
	return &QueryUserBasesResult{}
}

type QueryUserBasesArgs struct {
	Req *user.UserBasesRequest
}

func (p *QueryUserBasesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserBasesRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryUserBasesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryUserBasesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryUserBasesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryUserBasesArgs) Unmarshal(in []byte) error {
	msg := new(user.UserBasesRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryUserBasesArgs_Req_DEFAULT *user.UserBasesRequest

func (p *QueryUserBasesArgs) GetReq() *user.UserBasesRequest {
	if !p.IsSetReq() {
		return QueryUserBasesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryUserBasesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryUserBasesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryUserBasesResult struct {
	Success *user.UserBasesResponse
}

var QueryUserBasesResult_Success_DEFAULT *user.UserBasesResponse

func (p *QueryUserBasesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserBasesResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryUserBasesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryUserBasesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryUserBasesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryUserBasesResult) Unmarshal(in []byte) error {
	msg := new(user.UserBasesResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryUserBasesResult) GetSuccess() *user.UserBasesResponse {
	if !p.IsSetSuccess() {
		return QueryUserBasesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryUserBasesResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserBasesResponse)
}

func (p *QueryUserBasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryUserBasesResult) GetResult() interface{} {
	return p.Success
}

func queryUserBaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserBaseRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).QueryUserBase(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryUserBaseArgs:
		success, err := handler.(user.UserHandler).QueryUserBase(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryUserBaseResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryUserBaseArgs() interface{} {
	return &QueryUserBaseArgs{}
}

func newQueryUserBaseResult() interface{} {
	return &QueryUserBaseResult{}
}

type QueryUserBaseArgs struct {
	Req *user.UserBaseRequest
}

func (p *QueryUserBaseArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserBaseRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryUserBaseArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryUserBaseArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryUserBaseArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryUserBaseArgs) Unmarshal(in []byte) error {
	msg := new(user.UserBaseRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryUserBaseArgs_Req_DEFAULT *user.UserBaseRequest

func (p *QueryUserBaseArgs) GetReq() *user.UserBaseRequest {
	if !p.IsSetReq() {
		return QueryUserBaseArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryUserBaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryUserBaseArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryUserBaseResult struct {
	Success *user.UserBaseResponse
}

var QueryUserBaseResult_Success_DEFAULT *user.UserBaseResponse

func (p *QueryUserBaseResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserBaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryUserBaseResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryUserBaseResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryUserBaseResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryUserBaseResult) Unmarshal(in []byte) error {
	msg := new(user.UserBaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryUserBaseResult) GetSuccess() *user.UserBaseResponse {
	if !p.IsSetSuccess() {
		return QueryUserBaseResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryUserBaseResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserBaseResponse)
}

func (p *QueryUserBaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryUserBaseResult) GetResult() interface{} {
	return p.Success
}

func queryUserBaseByPuidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserBaseRequestByPuid)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).QueryUserBaseByPuid(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryUserBaseByPuidArgs:
		success, err := handler.(user.UserHandler).QueryUserBaseByPuid(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryUserBaseByPuidResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryUserBaseByPuidArgs() interface{} {
	return &QueryUserBaseByPuidArgs{}
}

func newQueryUserBaseByPuidResult() interface{} {
	return &QueryUserBaseByPuidResult{}
}

type QueryUserBaseByPuidArgs struct {
	Req *user.UserBaseRequestByPuid
}

func (p *QueryUserBaseByPuidArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserBaseRequestByPuid)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryUserBaseByPuidArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryUserBaseByPuidArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryUserBaseByPuidArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryUserBaseByPuidArgs) Unmarshal(in []byte) error {
	msg := new(user.UserBaseRequestByPuid)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryUserBaseByPuidArgs_Req_DEFAULT *user.UserBaseRequestByPuid

func (p *QueryUserBaseByPuidArgs) GetReq() *user.UserBaseRequestByPuid {
	if !p.IsSetReq() {
		return QueryUserBaseByPuidArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryUserBaseByPuidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryUserBaseByPuidArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryUserBaseByPuidResult struct {
	Success *user.UserBaseResponse
}

var QueryUserBaseByPuidResult_Success_DEFAULT *user.UserBaseResponse

func (p *QueryUserBaseByPuidResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserBaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryUserBaseByPuidResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryUserBaseByPuidResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryUserBaseByPuidResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryUserBaseByPuidResult) Unmarshal(in []byte) error {
	msg := new(user.UserBaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryUserBaseByPuidResult) GetSuccess() *user.UserBaseResponse {
	if !p.IsSetSuccess() {
		return QueryUserBaseByPuidResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryUserBaseByPuidResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserBaseResponse)
}

func (p *QueryUserBaseByPuidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryUserBaseByPuidResult) GetResult() interface{} {
	return p.Success
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginOrRegRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).UserRegister(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserRegisterArgs:
		success, err := handler.(user.UserHandler).UserRegister(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserRegisterResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserRegisterArgs() interface{} {
	return &UserRegisterArgs{}
}

func newUserRegisterResult() interface{} {
	return &UserRegisterResult{}
}

type UserRegisterArgs struct {
	Req *user.LoginOrRegRequest
}

func (p *UserRegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginOrRegRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserRegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserRegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserRegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserRegisterArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginOrRegRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserRegisterArgs_Req_DEFAULT *user.LoginOrRegRequest

func (p *UserRegisterArgs) GetReq() *user.LoginOrRegRequest {
	if !p.IsSetReq() {
		return UserRegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserRegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserRegisterResult struct {
	Success *user.UserActionResponse
}

var UserRegisterResult_Success_DEFAULT *user.UserActionResponse

func (p *UserRegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserRegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserRegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserRegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserRegisterResult) Unmarshal(in []byte) error {
	msg := new(user.UserActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserRegisterResult) GetSuccess() *user.UserActionResponse {
	if !p.IsSetSuccess() {
		return UserRegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserActionResponse)
}

func (p *UserRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserRegisterResult) GetResult() interface{} {
	return p.Success
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginOrRegRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).UserLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserLoginArgs:
		success, err := handler.(user.UserHandler).UserLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserLoginArgs() interface{} {
	return &UserLoginArgs{}
}

func newUserLoginResult() interface{} {
	return &UserLoginResult{}
}

type UserLoginArgs struct {
	Req *user.LoginOrRegRequest
}

func (p *UserLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginOrRegRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserLoginArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginOrRegRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserLoginArgs_Req_DEFAULT *user.LoginOrRegRequest

func (p *UserLoginArgs) GetReq() *user.LoginOrRegRequest {
	if !p.IsSetReq() {
		return UserLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserLoginResult struct {
	Success *user.UserActionResponse
}

var UserLoginResult_Success_DEFAULT *user.UserActionResponse

func (p *UserLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserLoginResult) Unmarshal(in []byte) error {
	msg := new(user.UserActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserLoginResult) GetSuccess() *user.UserActionResponse {
	if !p.IsSetSuccess() {
		return UserLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserActionResponse)
}

func (p *UserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserLoginResult) GetResult() interface{} {
	return p.Success
}

func userPwdModifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.PwdModRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).UserPwdModify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserPwdModifyArgs:
		success, err := handler.(user.UserHandler).UserPwdModify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserPwdModifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserPwdModifyArgs() interface{} {
	return &UserPwdModifyArgs{}
}

func newUserPwdModifyResult() interface{} {
	return &UserPwdModifyResult{}
}

type UserPwdModifyArgs struct {
	Req *user.PwdModRequest
}

func (p *UserPwdModifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.PwdModRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserPwdModifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserPwdModifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserPwdModifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserPwdModifyArgs) Unmarshal(in []byte) error {
	msg := new(user.PwdModRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserPwdModifyArgs_Req_DEFAULT *user.PwdModRequest

func (p *UserPwdModifyArgs) GetReq() *user.PwdModRequest {
	if !p.IsSetReq() {
		return UserPwdModifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserPwdModifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserPwdModifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserPwdModifyResult struct {
	Success *user.UserActionResponse
}

var UserPwdModifyResult_Success_DEFAULT *user.UserActionResponse

func (p *UserPwdModifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserPwdModifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserPwdModifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserPwdModifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserPwdModifyResult) Unmarshal(in []byte) error {
	msg := new(user.UserActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserPwdModifyResult) GetSuccess() *user.UserActionResponse {
	if !p.IsSetSuccess() {
		return UserPwdModifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserPwdModifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserActionResponse)
}

func (p *UserPwdModifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserPwdModifyResult) GetResult() interface{} {
	return p.Success
}

func userProfileModifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ProfileModRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).UserProfileModify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserProfileModifyArgs:
		success, err := handler.(user.UserHandler).UserProfileModify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserProfileModifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserProfileModifyArgs() interface{} {
	return &UserProfileModifyArgs{}
}

func newUserProfileModifyResult() interface{} {
	return &UserProfileModifyResult{}
}

type UserProfileModifyArgs struct {
	Req *user.ProfileModRequest
}

func (p *UserProfileModifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ProfileModRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserProfileModifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserProfileModifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserProfileModifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserProfileModifyArgs) Unmarshal(in []byte) error {
	msg := new(user.ProfileModRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserProfileModifyArgs_Req_DEFAULT *user.ProfileModRequest

func (p *UserProfileModifyArgs) GetReq() *user.ProfileModRequest {
	if !p.IsSetReq() {
		return UserProfileModifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserProfileModifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserProfileModifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserProfileModifyResult struct {
	Success *user.UserActionResponse
}

var UserProfileModifyResult_Success_DEFAULT *user.UserActionResponse

func (p *UserProfileModifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserProfileModifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserProfileModifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserProfileModifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserProfileModifyResult) Unmarshal(in []byte) error {
	msg := new(user.UserActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserProfileModifyResult) GetSuccess() *user.UserActionResponse {
	if !p.IsSetSuccess() {
		return UserProfileModifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserProfileModifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserActionResponse)
}

func (p *UserProfileModifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserProfileModifyResult) GetResult() interface{} {
	return p.Success
}

func userExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserExistRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserHandler).UserExist(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserExistArgs:
		success, err := handler.(user.UserHandler).UserExist(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserExistResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserExistArgs() interface{} {
	return &UserExistArgs{}
}

func newUserExistResult() interface{} {
	return &UserExistResult{}
}

type UserExistArgs struct {
	Req *user.UserExistRequest
}

func (p *UserExistArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserExistRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserExistArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserExistArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserExistArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserExistArgs) Unmarshal(in []byte) error {
	msg := new(user.UserExistRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserExistArgs_Req_DEFAULT *user.UserExistRequest

func (p *UserExistArgs) GetReq() *user.UserExistRequest {
	if !p.IsSetReq() {
		return UserExistArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserExistArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserExistArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserExistResult struct {
	Success *user.UserExistResponse
}

var UserExistResult_Success_DEFAULT *user.UserExistResponse

func (p *UserExistResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserExistResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserExistResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserExistResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserExistResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserExistResult) Unmarshal(in []byte) error {
	msg := new(user.UserExistResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserExistResult) GetSuccess() *user.UserExistResponse {
	if !p.IsSetSuccess() {
		return UserExistResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserExistResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserExistResponse)
}

func (p *UserExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserExistResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) User(ctx context.Context, Req *user.UserRequest) (r *user.UserResponse, err error) {
	var _args UserArgs
	_args.Req = Req
	var _result UserResult
	if err = p.c.Call(ctx, "User", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserBases(ctx context.Context, Req *user.UserBasesRequest) (r *user.UserBasesResponse, err error) {
	var _args QueryUserBasesArgs
	_args.Req = Req
	var _result QueryUserBasesResult
	if err = p.c.Call(ctx, "QueryUserBases", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserBase(ctx context.Context, Req *user.UserBaseRequest) (r *user.UserBaseResponse, err error) {
	var _args QueryUserBaseArgs
	_args.Req = Req
	var _result QueryUserBaseResult
	if err = p.c.Call(ctx, "QueryUserBase", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserBaseByPuid(ctx context.Context, Req *user.UserBaseRequestByPuid) (r *user.UserBaseResponse, err error) {
	var _args QueryUserBaseByPuidArgs
	_args.Req = Req
	var _result QueryUserBaseByPuidResult
	if err = p.c.Call(ctx, "QueryUserBaseByPuid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRegister(ctx context.Context, Req *user.LoginOrRegRequest) (r *user.UserActionResponse, err error) {
	var _args UserRegisterArgs
	_args.Req = Req
	var _result UserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, Req *user.LoginOrRegRequest) (r *user.UserActionResponse, err error) {
	var _args UserLoginArgs
	_args.Req = Req
	var _result UserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserPwdModify(ctx context.Context, Req *user.PwdModRequest) (r *user.UserActionResponse, err error) {
	var _args UserPwdModifyArgs
	_args.Req = Req
	var _result UserPwdModifyResult
	if err = p.c.Call(ctx, "UserPwdModify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserProfileModify(ctx context.Context, Req *user.ProfileModRequest) (r *user.UserActionResponse, err error) {
	var _args UserProfileModifyArgs
	_args.Req = Req
	var _result UserProfileModifyResult
	if err = p.c.Call(ctx, "UserProfileModify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserExist(ctx context.Context, Req *user.UserExistRequest) (r *user.UserExistResponse, err error) {
	var _args UserExistArgs
	_args.Req = Req
	var _result UserExistResult
	if err = p.c.Call(ctx, "UserExist", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

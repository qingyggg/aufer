// Code generated by hertz generator.

package article

import (
	"context"
	"github.com/qingyggg/aufer/biz/rpc"
	article_rpc "github.com/qingyggg/aufer/cmd/article/rpc"
	"github.com/qingyggg/aufer/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	article_cmd "github.com/qingyggg/aufer/biz/model/cmd/article"
	"github.com/qingyggg/aufer/biz/model/cmd/common"
	"github.com/qingyggg/aufer/biz/model/http/basic/article"
)

// PublishAction 发布文章接口
// @Summary 发布新文章
// @Description 用户发布新的文章内容
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.PublishRequest true "文章发布请求参数"
// @Success 200 {object} article_cmd.PubOrModActionResponse "发布成功返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.PublishRequest)
	resp := new(article_cmd.PubOrModActionResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	aid, err := article_rpc.PublishAction(rpc.Clients.ArticleClient, ctx, &article_cmd.PublishRequest{
		Title:    req.Title,
		Content:  req.Content,
		CoverUrl: req.CoverUrl,
		Note:     req.Note,
		Uid:      utils.GetUid(c, ctx),
	})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.Aid = aid
	c.JSON(consts.StatusOK, resp)
}

// PublishModifyAction 修改文章接口
// @Summary 修改已发布文章
// @Description 用户修改已发布的文章内容
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.PublishRequest true "文章修改请求参数"
// @Success 200 {object} article_cmd.PubOrModActionResponse "修改成功返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish [PUT]
func PublishModifyAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.PublishRequest)
	resp := new(article_cmd.PubOrModActionResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	aid, err := article_rpc.ArticleModifyAction(rpc.Clients.ArticleClient, ctx, &article_cmd.ModRequest{
		Title:    req.Title,
		Content:  req.Content,
		CoverUrl: req.CoverUrl,
		Note:     req.Note,
		Uid:      utils.GetUid(c, ctx),
	})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.Aid = aid
	c.JSON(consts.StatusOK, resp)
}

// PublishDelAction 删除文章接口
// @Summary 删除已发布文章
// @Description 用户删除已发布的文章
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.Aid true "文章ID参数"
// @Success 200 {object} common.BaseResponse "删除成功返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish [DELETE]
func PublishDelAction(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.Aid)
	resp := new(common.BaseResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = article_rpc.ArticleDelAction(rpc.Clients.ArticleClient, ctx, &article_cmd.DelRequest{
		Aid: req.Aid,
		Uid: utils.GetUid(c, ctx),
	})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp = utils.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// PublishDetail 获取文章详情接口
// @Summary 获取文章详细信息
// @Description 根据文章ID获取文章的详细内容
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param Aid query int true "文章ID"
// @Param Uid query int false "作者用户ID"
// @Param MyUid query int false "当前登录用户ID"
// @Success 200 {object} article_cmd.ArticleResponse "文章详情返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish [GET]
func PublishDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.DetailRequest)
	resp := new(article_cmd.ArticleResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	ar, err := article_rpc.ArticleDetail(rpc.Clients.ArticleClient, ctx, &article_cmd.DetailRequest{
		Aid:   req.Aid,
		Uid:   req.Uid,
		MyUid: req.MyUid,
	})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.Article = ar
	c.JSON(consts.StatusOK, resp)
}

// PublishList 获取文章列表接口
// @Summary 获取文章列表
// @Description 根据条件筛选获取文章列表
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.CardsRequest true "文章列表查询参数"
// @Success 200 {object} article_cmd.CardsResponse "文章列表返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish/list [POST]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.CardsRequest)
	resp := new(article_cmd.CardsResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	list, err := article_rpc.ArticleList(rpc.Clients.ArticleClient, ctx, &article_cmd.CardsRequest{
		Uid:         req.Uid,
		Offset:      req.Offset,
		Tags:        req.Tags,        //文章标签
		Category:    req.Category,    //文章种类
		Type:        req.Type,        //1->请求最新的 2->请求最热门的
		IsCollected: req.IsCollected, //是否为该用户收藏的文章
		AuthorId:    req.AuthorId,    //作者的id
	})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.List = list
	c.JSON(consts.StatusOK, resp)
}

// PublishViewCountAdd 增加文章浏览量接口
// @Summary 增加文章浏览计数
// @Description 记录文章被浏览一次，增加浏览计数
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.Aid true "文章ID参数"
// @Success 200 {object} common.BaseResponse "操作成功返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish/view_count_add [POST]
func PublishViewCountAdd(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.Aid)
	resp := new(common.BaseResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = article_rpc.ArticleViewCountAdd(rpc.Clients.ArticleClient, ctx, req.Aid)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp = utils.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// PublishCollect 文章收藏接口
// @Summary 收藏或取消收藏文章
// @Description 用户对文章进行收藏或取消收藏操作
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.CollectRequest true "收藏请求参数"
// @Success 200 {object} common.BaseResponse "操作成功返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish/collect [POST]
func PublishCollect(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.CollectRequest)
	resp := new(common.BaseResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = article_rpc.ArticleCollect(rpc.Clients.ArticleClient, ctx, &article_cmd.CollectRequest{Aid: req.Aid, Uid: utils.GetUid(c, ctx), Type: req.Type})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp = utils.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// PublishFavorite 文章点赞接口
// @Summary 点赞或取消点赞文章
// @Description 用户对文章进行点赞或取消点赞操作
// @Tags 文章操作
// @Accept json
// @Produce json
// @Param data body article.FavoriteRequest true "点赞请求参数"
// @Success 200 {object} common.BaseResponse "操作成功返回信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /publish/favorite [POST]
func PublishFavorite(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(article.FavoriteRequest)
	resp := new(common.BaseResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	err = article_rpc.ArticleFavorite(rpc.Clients.ArticleClient, ctx, &article_cmd.FavoriteRequest{Aid: req.Aid, Uid: utils.GetUid(c, ctx), Type: req.Type})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp = utils.BuildBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// Code generated by hertz generator.
package user

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/qingyggg/aufer/biz/model/http/basic/user"
	_ "github.com/qingyggg/aufer/biz/model/http/common"
	"github.com/qingyggg/aufer/biz/mw/jwt"
	"github.com/qingyggg/aufer/biz/rpc"
	rpcpack "github.com/qingyggg/aufer/biz/rpc/pack"
	user_rpc "github.com/qingyggg/aufer/cmd/user/rpc"
	usercmd "github.com/qingyggg/aufer/kitex_gen/cmd/user"
	"github.com/qingyggg/aufer/pkg/utils"
)

// User 获取用户信息
//
// @Summary 获取用户信息
// @Description 根据用户ID获取用户的详细信息
// @Tags 用户管理
// @Produce json
// @Param uid query string true  "要查询的用户ID"
// @Param my_uid query string false "当前登录用户ID，不提供则默认为guest"
// @Success 200 {object} user.UserResponse "用户信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /user [GET]
func User(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(user.UserRequest)
	resp := new(user.UserResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	if req.MyUid == req.Uid {
		req.Uid = "current"
	}
	queryUser, err := user_rpc.QueryUser(rpc.Clients.UserClient, ctx, req.Uid, req.MyUid)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.User = rpcpack.ConvertUser(queryUser)
	c.JSON(consts.StatusOK, resp)
}

// UserRegister 用户注册
//
// @Summary 用户注册
// @Description 创建新用户账号
// @Tags 用户管理
// @Accept json
// @Produce json
// @Param request body user.LoginOrRegRequest true "用户注册信息"
// @Success 200 {object} user.UserActionResponse "注册成功返回的用户信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 409 {object} common.BaseResponse "邮箱已被注册"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(user.LoginOrRegRequest)
	resp := new(user.UserActionResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	uid, puid, err := user_rpc.UserRegister(rpc.Clients.UserClient, ctx, req.Email, req.Password)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	jwt.JwtMiddleware.LoginHandler(ctx, c) //设置cookie
	if v, _ := c.Get("hasErr"); v.(bool) {
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.Puid = puid
	resp.Uid = uid
	c.JSON(consts.StatusOK, resp)
}

// UserLogin 用户登录
//
// @Summary 用户登录
// @Description 用户使用邮箱和密码登录系统
// @Tags 用户管理
// @Accept json
// @Produce json
// @Param request body user.LoginOrRegRequest true "用户登录信息"
// @Success 200 {object} user.UserActionResponse "登录成功返回的用户信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 401 {object} common.BaseResponse "邮箱或密码错误"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(user.LoginOrRegRequest)
	resp := new(user.UserActionResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	jwt.JwtMiddleware.LoginHandler(ctx, c) //设置cookie
	if v, _ := c.Get("hasErr"); v.(bool) {
		return
	}
	v1, _ := c.Get("puid")
	puid := v1.(int64)
	v2, _ := c.Get("uid")
	uid := v2.(string)
	resp.Base = utils.BuildBaseResp(nil)
	resp.Puid = puid
	resp.Uid = uid
	c.JSON(consts.StatusOK, resp)
}

// UserPwdModify 修改用户密码
//
// @Summary 修改用户密码
// @Description 用户修改自己的登录密码
// @Tags 用户管理
// @Accept json
// @Produce json
// @Param request body user.PwdModRequest true "密码修改信息"
// @Success 200 {object} user.UserActionResponse "密码修改成功返回的用户信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 401 {object} common.BaseResponse "旧密码验证失败"
// @Failure 404 {object} common.BaseResponse "用户不存在"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /user/pwd_mod [POST]
func UserPwdModify(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(user.PwdModRequest)
	resp := new(user.UserActionResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	uid, puid, err := user_rpc.UserPwdModify(rpc.Clients.UserClient, ctx, &usercmd.PwdModRequest{NewPassword: req.NewPassword, OldPassword: req.OldPassword, Email: req.Email})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.Puid = puid
	resp.Uid = uid
	c.JSON(consts.StatusOK, resp)
}

// UserProfileModify 修改用户资料
//
// @Summary 修改用户资料
// @Description 用户修改个人资料信息，包括头像、背景图片、签名和名称
// @Tags 用户管理
// @Accept json
// @Produce json
// @Param request body user.ProfileModRequest true "用户资料修改信息"
// @Success 200 {object} user.UserActionResponse "资料修改成功返回的用户信息"
// @Failure 400 {object} common.BaseResponse "请求参数错误"
// @Failure 401 {object} common.BaseResponse "未授权，用户未登录"
// @Failure 404 {object} common.BaseResponse "用户不存在"
// @Failure 500 {object} common.BaseResponse "服务器内部错误"
// @Router /user/profile_mod [POST]
func UserProfileModify(ctx context.Context, c *app.RequestContext) {
	var err error
	req := new(user.ProfileModRequest)
	resp := new(user.UserActionResponse)
	err = c.BindAndValidate(req)
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	uid, puid, err := user_rpc.UserProfileModify(rpc.Clients.UserClient, ctx, &usercmd.ProfileModRequest{
		Avatar:          req.Avatar,
		BackgroundImage: req.BackgroundImage,
		Signature:       req.Signature,
		Name:            req.Name,
		Uid:             utils.GetUid(c, ctx),
	})
	if err != nil {
		utils.ErrResp(c, err)
		return
	}
	resp.Base = utils.BuildBaseResp(nil)
	resp.Puid = puid
	resp.Uid = uid
	c.JSON(consts.StatusOK, resp)
}

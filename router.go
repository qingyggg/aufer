// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/swagger"
	handler "github.com/qingyggg/aufer/biz/handler"
	"github.com/qingyggg/aufer/biz/model/cmd/common"
	"github.com/qingyggg/aufer/biz/mw/jwt"
	_ "github.com/qingyggg/aufer/docs" // 导入swagger文档
	"github.com/qingyggg/aufer/pkg/errno"
	swaggerFiles "github.com/swaggo/files"
)

func JwtAuth() []app.HandlerFunc {
	return []app.HandlerFunc{
		jwt.JwtMiddleware.MiddlewareFunc(),
	}
}

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	// ping
	r.GET("/ping", handler.Ping)
	//文件上传
	r.POST("/upload/file", handler.FileUpload)
	//oss
	r.GET("/src/*name", minioReverseProxy)

	//swagger - 使用相对路径，避免混合内容问题
	url := swagger.URL("/swagger/doc.json") // 使用相对路径而非绝对URL
	r.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, url))

	//验证token
	r.GET("/verifyToken", append(JwtAuth(), func(ctx context.Context, c *app.RequestContext) {
		c.JSON(consts.StatusOK, &common.BaseResponse{
			StatusCode: errno.SuccessCode,
			StatusMsg:  errno.SuccessMsg,
		})
	})...)
}

// Code generated by Kitex v0.12.3. DO NOT EDIT.

package userhandler

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "github.com/qingyggg/aufer/kitex_gen/cmd/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	User(ctx context.Context, Req *user.UserRequest, callOptions ...callopt.Option) (r *user.UserResponse, err error)
	QueryUserBases(ctx context.Context, Req *user.UserBasesRequest, callOptions ...callopt.Option) (r *user.UserBasesResponse, err error)
	QueryUserBase(ctx context.Context, Req *user.UserBaseRequest, callOptions ...callopt.Option) (r *user.UserBaseResponse, err error)
	QueryUserBaseByPuid(ctx context.Context, Req *user.UserBaseRequestByPuid, callOptions ...callopt.Option) (r *user.UserBaseResponse, err error)
	UserRegister(ctx context.Context, Req *user.LoginOrRegRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error)
	UserLogin(ctx context.Context, Req *user.LoginOrRegRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error)
	UserPwdModify(ctx context.Context, Req *user.PwdModRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error)
	UserProfileModify(ctx context.Context, Req *user.ProfileModRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error)
	UserExist(ctx context.Context, Req *user.UserExistRequest, callOptions ...callopt.Option) (r *user.UserExistResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserHandlerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserHandlerClient struct {
	*kClient
}

func (p *kUserHandlerClient) User(ctx context.Context, Req *user.UserRequest, callOptions ...callopt.Option) (r *user.UserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.User(ctx, Req)
}

func (p *kUserHandlerClient) QueryUserBases(ctx context.Context, Req *user.UserBasesRequest, callOptions ...callopt.Option) (r *user.UserBasesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserBases(ctx, Req)
}

func (p *kUserHandlerClient) QueryUserBase(ctx context.Context, Req *user.UserBaseRequest, callOptions ...callopt.Option) (r *user.UserBaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserBase(ctx, Req)
}

func (p *kUserHandlerClient) QueryUserBaseByPuid(ctx context.Context, Req *user.UserBaseRequestByPuid, callOptions ...callopt.Option) (r *user.UserBaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryUserBaseByPuid(ctx, Req)
}

func (p *kUserHandlerClient) UserRegister(ctx context.Context, Req *user.LoginOrRegRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserRegister(ctx, Req)
}

func (p *kUserHandlerClient) UserLogin(ctx context.Context, Req *user.LoginOrRegRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserLogin(ctx, Req)
}

func (p *kUserHandlerClient) UserPwdModify(ctx context.Context, Req *user.PwdModRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserPwdModify(ctx, Req)
}

func (p *kUserHandlerClient) UserProfileModify(ctx context.Context, Req *user.ProfileModRequest, callOptions ...callopt.Option) (r *user.UserActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserProfileModify(ctx, Req)
}

func (p *kUserHandlerClient) UserExist(ctx context.Context, Req *user.UserExistRequest, callOptions ...callopt.Option) (r *user.UserExistResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserExist(ctx, Req)
}

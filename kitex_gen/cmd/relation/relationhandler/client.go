// Code generated by Kitex v0.12.3. DO NOT EDIT.

package relationhandler

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	common "github.com/qingyggg/aufer/kitex_gen/cmd/common"
	relation "github.com/qingyggg/aufer/kitex_gen/cmd/relation"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Follow(ctx context.Context, Req *relation.FollowRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	FollowList(ctx context.Context, Req *relation.ListRequest, callOptions ...callopt.Option) (r *relation.ListResponse, err error)
	IsFollow(ctx context.Context, Req *relation.IsFollowRequest, callOptions ...callopt.Option) (r *relation.IsFollowResponse, err error)
	UserFollowInfo(ctx context.Context, Req *relation.UserFollowInfoRequest, callOptions ...callopt.Option) (r *relation.UserFollowInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRelationHandlerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRelationHandlerClient struct {
	*kClient
}

func (p *kRelationHandlerClient) Follow(ctx context.Context, Req *relation.FollowRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Follow(ctx, Req)
}

func (p *kRelationHandlerClient) FollowList(ctx context.Context, Req *relation.ListRequest, callOptions ...callopt.Option) (r *relation.ListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, Req)
}

func (p *kRelationHandlerClient) IsFollow(ctx context.Context, Req *relation.IsFollowRequest, callOptions ...callopt.Option) (r *relation.IsFollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFollow(ctx, Req)
}

func (p *kRelationHandlerClient) UserFollowInfo(ctx context.Context, Req *relation.UserFollowInfoRequest, callOptions ...callopt.Option) (r *relation.UserFollowInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserFollowInfo(ctx, Req)
}

// Code generated by Kitex v0.12.3. DO NOT EDIT.

package commenthandler

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	comment "github.com/qingyggg/aufer/kitex_gen/cmd/comment"
	common "github.com/qingyggg/aufer/kitex_gen/cmd/common"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CommentAction": kitex.NewMethodInfo(
		commentActionHandler,
		newCommentActionArgs,
		newCommentActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentDelAction": kitex.NewMethodInfo(
		commentDelActionHandler,
		newCommentDelActionArgs,
		newCommentDelActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentList": kitex.NewMethodInfo(
		commentListHandler,
		newCommentListArgs,
		newCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentFavorite": kitex.NewMethodInfo(
		commentFavoriteHandler,
		newCommentFavoriteArgs,
		newCommentFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentCount": kitex.NewMethodInfo(
		commentCountHandler,
		newCommentCountArgs,
		newCommentCountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CommentCounts": kitex.NewMethodInfo(
		commentCountsHandler,
		newCommentCountsArgs,
		newCommentCountsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	commentHandlerServiceInfo                = NewServiceInfo()
	commentHandlerServiceInfoForClient       = NewServiceInfoForClient()
	commentHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commentHandlerServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commentHandlerServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commentHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CommentHandler"
	handlerType := (*comment.CommentHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "rpc.comment",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CmtRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentHandler).CommentAction(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentActionArgs:
		success, err := handler.(comment.CommentHandler).CommentAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentActionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentActionArgs() interface{} {
	return &CommentActionArgs{}
}

func newCommentActionResult() interface{} {
	return &CommentActionResult{}
}

type CommentActionArgs struct {
	Req *comment.CmtRequest
}

func (p *CommentActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CmtRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentActionArgs) Unmarshal(in []byte) error {
	msg := new(comment.CmtRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentActionArgs_Req_DEFAULT *comment.CmtRequest

func (p *CommentActionArgs) GetReq() *comment.CmtRequest {
	if !p.IsSetReq() {
		return CommentActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentActionResult struct {
	Success *comment.CmtActionResponse
}

var CommentActionResult_Success_DEFAULT *comment.CmtActionResponse

func (p *CommentActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CmtActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentActionResult) Unmarshal(in []byte) error {
	msg := new(comment.CmtActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentActionResult) GetSuccess() *comment.CmtActionResponse {
	if !p.IsSetSuccess() {
		return CommentActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CmtActionResponse)
}

func (p *CommentActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentActionResult) GetResult() interface{} {
	return p.Success
}

func commentDelActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DelRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentHandler).CommentDelAction(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentDelActionArgs:
		success, err := handler.(comment.CommentHandler).CommentDelAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentDelActionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentDelActionArgs() interface{} {
	return &CommentDelActionArgs{}
}

func newCommentDelActionResult() interface{} {
	return &CommentDelActionResult{}
}

type CommentDelActionArgs struct {
	Req *comment.DelRequest
}

func (p *CommentDelActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.DelRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentDelActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentDelActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentDelActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentDelActionArgs) Unmarshal(in []byte) error {
	msg := new(comment.DelRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentDelActionArgs_Req_DEFAULT *comment.DelRequest

func (p *CommentDelActionArgs) GetReq() *comment.DelRequest {
	if !p.IsSetReq() {
		return CommentDelActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentDelActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentDelActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentDelActionResult struct {
	Success *common.BaseResponse
}

var CommentDelActionResult_Success_DEFAULT *common.BaseResponse

func (p *CommentDelActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentDelActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentDelActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentDelActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentDelActionResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentDelActionResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return CommentDelActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentDelActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *CommentDelActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentDelActionResult) GetResult() interface{} {
	return p.Success
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CardsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentHandler).CommentList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentListArgs:
		success, err := handler.(comment.CommentHandler).CommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentListArgs() interface{} {
	return &CommentListArgs{}
}

func newCommentListResult() interface{} {
	return &CommentListResult{}
}

type CommentListArgs struct {
	Req *comment.CardsRequest
}

func (p *CommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CardsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentListArgs) Unmarshal(in []byte) error {
	msg := new(comment.CardsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentListArgs_Req_DEFAULT *comment.CardsRequest

func (p *CommentListArgs) GetReq() *comment.CardsRequest {
	if !p.IsSetReq() {
		return CommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentListResult struct {
	Success *comment.CardsResponse
}

var CommentListResult_Success_DEFAULT *comment.CardsResponse

func (p *CommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CardsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentListResult) Unmarshal(in []byte) error {
	msg := new(comment.CardsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentListResult) GetSuccess() *comment.CardsResponse {
	if !p.IsSetSuccess() {
		return CommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CardsResponse)
}

func (p *CommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentListResult) GetResult() interface{} {
	return p.Success
}

func commentFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.FavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentHandler).CommentFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentFavoriteArgs:
		success, err := handler.(comment.CommentHandler).CommentFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentFavoriteArgs() interface{} {
	return &CommentFavoriteArgs{}
}

func newCommentFavoriteResult() interface{} {
	return &CommentFavoriteResult{}
}

type CommentFavoriteArgs struct {
	Req *comment.FavoriteRequest
}

func (p *CommentFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.FavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(comment.FavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentFavoriteArgs_Req_DEFAULT *comment.FavoriteRequest

func (p *CommentFavoriteArgs) GetReq() *comment.FavoriteRequest {
	if !p.IsSetReq() {
		return CommentFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentFavoriteResult struct {
	Success *common.BaseResponse
}

var CommentFavoriteResult_Success_DEFAULT *common.BaseResponse

func (p *CommentFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentFavoriteResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentFavoriteResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return CommentFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *CommentFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentFavoriteResult) GetResult() interface{} {
	return p.Success
}

func commentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CmtCtRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentHandler).CommentCount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentCountArgs:
		success, err := handler.(comment.CommentHandler).CommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentCountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentCountArgs() interface{} {
	return &CommentCountArgs{}
}

func newCommentCountResult() interface{} {
	return &CommentCountResult{}
}

type CommentCountArgs struct {
	Req *comment.CmtCtRequest
}

func (p *CommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CmtCtRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentCountArgs) Unmarshal(in []byte) error {
	msg := new(comment.CmtCtRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentCountArgs_Req_DEFAULT *comment.CmtCtRequest

func (p *CommentCountArgs) GetReq() *comment.CmtCtRequest {
	if !p.IsSetReq() {
		return CommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentCountResult struct {
	Success *comment.CmtCtResponse
}

var CommentCountResult_Success_DEFAULT *comment.CmtCtResponse

func (p *CommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CmtCtResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentCountResult) Unmarshal(in []byte) error {
	msg := new(comment.CmtCtResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentCountResult) GetSuccess() *comment.CmtCtResponse {
	if !p.IsSetSuccess() {
		return CommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CmtCtResponse)
}

func (p *CommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentCountResult) GetResult() interface{} {
	return p.Success
}

func commentCountsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.CmtsCtRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentHandler).CommentCounts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CommentCountsArgs:
		success, err := handler.(comment.CommentHandler).CommentCounts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentCountsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCommentCountsArgs() interface{} {
	return &CommentCountsArgs{}
}

func newCommentCountsResult() interface{} {
	return &CommentCountsResult{}
}

type CommentCountsArgs struct {
	Req *comment.CmtsCtRequest
}

func (p *CommentCountsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment.CmtsCtRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentCountsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentCountsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentCountsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CommentCountsArgs) Unmarshal(in []byte) error {
	msg := new(comment.CmtsCtRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentCountsArgs_Req_DEFAULT *comment.CmtsCtRequest

func (p *CommentCountsArgs) GetReq() *comment.CmtsCtRequest {
	if !p.IsSetReq() {
		return CommentCountsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentCountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentCountsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CommentCountsResult struct {
	Success *comment.CmtCtMapResponse
}

var CommentCountsResult_Success_DEFAULT *comment.CmtCtMapResponse

func (p *CommentCountsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment.CmtCtMapResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentCountsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentCountsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentCountsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CommentCountsResult) Unmarshal(in []byte) error {
	msg := new(comment.CmtCtMapResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentCountsResult) GetSuccess() *comment.CmtCtMapResponse {
	if !p.IsSetSuccess() {
		return CommentCountsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentCountsResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.CmtCtMapResponse)
}

func (p *CommentCountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentCountsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentAction(ctx context.Context, Req *comment.CmtRequest) (r *comment.CmtActionResponse, err error) {
	var _args CommentActionArgs
	_args.Req = Req
	var _result CommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentDelAction(ctx context.Context, Req *comment.DelRequest) (r *common.BaseResponse, err error) {
	var _args CommentDelActionArgs
	_args.Req = Req
	var _result CommentDelActionResult
	if err = p.c.Call(ctx, "CommentDelAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, Req *comment.CardsRequest) (r *comment.CardsResponse, err error) {
	var _args CommentListArgs
	_args.Req = Req
	var _result CommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentFavorite(ctx context.Context, Req *comment.FavoriteRequest) (r *common.BaseResponse, err error) {
	var _args CommentFavoriteArgs
	_args.Req = Req
	var _result CommentFavoriteResult
	if err = p.c.Call(ctx, "CommentFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentCount(ctx context.Context, Req *comment.CmtCtRequest) (r *comment.CmtCtResponse, err error) {
	var _args CommentCountArgs
	_args.Req = Req
	var _result CommentCountResult
	if err = p.c.Call(ctx, "CommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentCounts(ctx context.Context, Req *comment.CmtsCtRequest) (r *comment.CmtCtMapResponse, err error) {
	var _args CommentCountsArgs
	_args.Req = Req
	var _result CommentCountsResult
	if err = p.c.Call(ctx, "CommentCounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

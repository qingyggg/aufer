// Code generated by Kitex v0.12.3. DO NOT EDIT.

package commenthandler

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	comment "github.com/qingyggg/aufer/kitex_gen/cmd/comment"
	common "github.com/qingyggg/aufer/kitex_gen/cmd/common"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CommentAction(ctx context.Context, Req *comment.CmtRequest, callOptions ...callopt.Option) (r *comment.CmtActionResponse, err error)
	CommentDelAction(ctx context.Context, Req *comment.DelRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	CommentList(ctx context.Context, Req *comment.CardsRequest, callOptions ...callopt.Option) (r *comment.CardsResponse, err error)
	CommentFavorite(ctx context.Context, Req *comment.FavoriteRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	CommentCount(ctx context.Context, Req *comment.CmtCtRequest, callOptions ...callopt.Option) (r *comment.CmtCtResponse, err error)
	CommentCounts(ctx context.Context, Req *comment.CmtsCtRequest, callOptions ...callopt.Option) (r *comment.CmtCtMapResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCommentHandlerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCommentHandlerClient struct {
	*kClient
}

func (p *kCommentHandlerClient) CommentAction(ctx context.Context, Req *comment.CmtRequest, callOptions ...callopt.Option) (r *comment.CmtActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, Req)
}

func (p *kCommentHandlerClient) CommentDelAction(ctx context.Context, Req *comment.DelRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentDelAction(ctx, Req)
}

func (p *kCommentHandlerClient) CommentList(ctx context.Context, Req *comment.CardsRequest, callOptions ...callopt.Option) (r *comment.CardsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentList(ctx, Req)
}

func (p *kCommentHandlerClient) CommentFavorite(ctx context.Context, Req *comment.FavoriteRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentFavorite(ctx, Req)
}

func (p *kCommentHandlerClient) CommentCount(ctx context.Context, Req *comment.CmtCtRequest, callOptions ...callopt.Option) (r *comment.CmtCtResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentCount(ctx, Req)
}

func (p *kCommentHandlerClient) CommentCounts(ctx context.Context, Req *comment.CmtsCtRequest, callOptions ...callopt.Option) (r *comment.CmtCtMapResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentCounts(ctx, Req)
}

// Code generated by Kitex v0.12.3. DO NOT EDIT.

package articlehandler

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	article "github.com/qingyggg/aufer/kitex_gen/cmd/article"
	common "github.com/qingyggg/aufer/kitex_gen/cmd/common"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	PublishAction(ctx context.Context, Req *article.PublishRequest, callOptions ...callopt.Option) (r *article.PubOrModActionResponse, err error)
	ArticleModifyAction(ctx context.Context, Req *article.ModRequest, callOptions ...callopt.Option) (r *article.PubOrModActionResponse, err error)
	ArticleDelAction(ctx context.Context, Req *article.DelRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	ArticleList(ctx context.Context, Req *article.CardsRequest, callOptions ...callopt.Option) (r *article.CardsResponse, err error)
	ArticleDetail(ctx context.Context, Req *article.DetailRequest, callOptions ...callopt.Option) (r *article.ArticleResponse, err error)
	ArticleViewCountAdd(ctx context.Context, Req *article.Aid, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	ArticleCollect(ctx context.Context, Req *article.CollectRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	ArticleFavorite(ctx context.Context, Req *article.FavoriteRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error)
	ArticleExist(ctx context.Context, Req *article.Aid, callOptions ...callopt.Option) (r *article.ArticleExistResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kArticleHandlerClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kArticleHandlerClient struct {
	*kClient
}

func (p *kArticleHandlerClient) PublishAction(ctx context.Context, Req *article.PublishRequest, callOptions ...callopt.Option) (r *article.PubOrModActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishAction(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleModifyAction(ctx context.Context, Req *article.ModRequest, callOptions ...callopt.Option) (r *article.PubOrModActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleModifyAction(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleDelAction(ctx context.Context, Req *article.DelRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleDelAction(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleList(ctx context.Context, Req *article.CardsRequest, callOptions ...callopt.Option) (r *article.CardsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleList(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleDetail(ctx context.Context, Req *article.DetailRequest, callOptions ...callopt.Option) (r *article.ArticleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleDetail(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleViewCountAdd(ctx context.Context, Req *article.Aid, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleViewCountAdd(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleCollect(ctx context.Context, Req *article.CollectRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleCollect(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleFavorite(ctx context.Context, Req *article.FavoriteRequest, callOptions ...callopt.Option) (r *common.BaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleFavorite(ctx, Req)
}

func (p *kArticleHandlerClient) ArticleExist(ctx context.Context, Req *article.Aid, callOptions ...callopt.Option) (r *article.ArticleExistResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ArticleExist(ctx, Req)
}

// Code generated by Kitex v0.12.3. DO NOT EDIT.

package articlehandler

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	article "github.com/qingyggg/aufer/kitex_gen/cmd/article"
	common "github.com/qingyggg/aufer/kitex_gen/cmd/common"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PublishAction": kitex.NewMethodInfo(
		publishActionHandler,
		newPublishActionArgs,
		newPublishActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleModifyAction": kitex.NewMethodInfo(
		articleModifyActionHandler,
		newArticleModifyActionArgs,
		newArticleModifyActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleDelAction": kitex.NewMethodInfo(
		articleDelActionHandler,
		newArticleDelActionArgs,
		newArticleDelActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleList": kitex.NewMethodInfo(
		articleListHandler,
		newArticleListArgs,
		newArticleListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleDetail": kitex.NewMethodInfo(
		articleDetailHandler,
		newArticleDetailArgs,
		newArticleDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleViewCountAdd": kitex.NewMethodInfo(
		articleViewCountAddHandler,
		newArticleViewCountAddArgs,
		newArticleViewCountAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleCollect": kitex.NewMethodInfo(
		articleCollectHandler,
		newArticleCollectArgs,
		newArticleCollectResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleFavorite": kitex.NewMethodInfo(
		articleFavoriteHandler,
		newArticleFavoriteArgs,
		newArticleFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ArticleExist": kitex.NewMethodInfo(
		articleExistHandler,
		newArticleExistArgs,
		newArticleExistResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	articleHandlerServiceInfo                = NewServiceInfo()
	articleHandlerServiceInfoForClient       = NewServiceInfoForClient()
	articleHandlerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return articleHandlerServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return articleHandlerServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return articleHandlerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ArticleHandler"
	handlerType := (*article.ArticleHandler)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "rpc.article",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.PublishRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).PublishAction(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PublishActionArgs:
		success, err := handler.(article.ArticleHandler).PublishAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishActionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPublishActionArgs() interface{} {
	return &PublishActionArgs{}
}

func newPublishActionResult() interface{} {
	return &PublishActionResult{}
}

type PublishActionArgs struct {
	Req *article.PublishRequest
}

func (p *PublishActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.PublishRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PublishActionArgs) Unmarshal(in []byte) error {
	msg := new(article.PublishRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishActionArgs_Req_DEFAULT *article.PublishRequest

func (p *PublishActionArgs) GetReq() *article.PublishRequest {
	if !p.IsSetReq() {
		return PublishActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PublishActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PublishActionResult struct {
	Success *article.PubOrModActionResponse
}

var PublishActionResult_Success_DEFAULT *article.PubOrModActionResponse

func (p *PublishActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(article.PubOrModActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PublishActionResult) Unmarshal(in []byte) error {
	msg := new(article.PubOrModActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishActionResult) GetSuccess() *article.PubOrModActionResponse {
	if !p.IsSetSuccess() {
		return PublishActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*article.PubOrModActionResponse)
}

func (p *PublishActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PublishActionResult) GetResult() interface{} {
	return p.Success
}

func articleModifyActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.ModRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleModifyAction(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleModifyActionArgs:
		success, err := handler.(article.ArticleHandler).ArticleModifyAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleModifyActionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleModifyActionArgs() interface{} {
	return &ArticleModifyActionArgs{}
}

func newArticleModifyActionResult() interface{} {
	return &ArticleModifyActionResult{}
}

type ArticleModifyActionArgs struct {
	Req *article.ModRequest
}

func (p *ArticleModifyActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.ModRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleModifyActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleModifyActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleModifyActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleModifyActionArgs) Unmarshal(in []byte) error {
	msg := new(article.ModRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleModifyActionArgs_Req_DEFAULT *article.ModRequest

func (p *ArticleModifyActionArgs) GetReq() *article.ModRequest {
	if !p.IsSetReq() {
		return ArticleModifyActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleModifyActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleModifyActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleModifyActionResult struct {
	Success *article.PubOrModActionResponse
}

var ArticleModifyActionResult_Success_DEFAULT *article.PubOrModActionResponse

func (p *ArticleModifyActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(article.PubOrModActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleModifyActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleModifyActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleModifyActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleModifyActionResult) Unmarshal(in []byte) error {
	msg := new(article.PubOrModActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleModifyActionResult) GetSuccess() *article.PubOrModActionResponse {
	if !p.IsSetSuccess() {
		return ArticleModifyActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleModifyActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*article.PubOrModActionResponse)
}

func (p *ArticleModifyActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleModifyActionResult) GetResult() interface{} {
	return p.Success
}

func articleDelActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.DelRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleDelAction(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleDelActionArgs:
		success, err := handler.(article.ArticleHandler).ArticleDelAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleDelActionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleDelActionArgs() interface{} {
	return &ArticleDelActionArgs{}
}

func newArticleDelActionResult() interface{} {
	return &ArticleDelActionResult{}
}

type ArticleDelActionArgs struct {
	Req *article.DelRequest
}

func (p *ArticleDelActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.DelRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleDelActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleDelActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleDelActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleDelActionArgs) Unmarshal(in []byte) error {
	msg := new(article.DelRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleDelActionArgs_Req_DEFAULT *article.DelRequest

func (p *ArticleDelActionArgs) GetReq() *article.DelRequest {
	if !p.IsSetReq() {
		return ArticleDelActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleDelActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleDelActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleDelActionResult struct {
	Success *common.BaseResponse
}

var ArticleDelActionResult_Success_DEFAULT *common.BaseResponse

func (p *ArticleDelActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleDelActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleDelActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleDelActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleDelActionResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleDelActionResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return ArticleDelActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleDelActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *ArticleDelActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleDelActionResult) GetResult() interface{} {
	return p.Success
}

func articleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.CardsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleListArgs:
		success, err := handler.(article.ArticleHandler).ArticleList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleListArgs() interface{} {
	return &ArticleListArgs{}
}

func newArticleListResult() interface{} {
	return &ArticleListResult{}
}

type ArticleListArgs struct {
	Req *article.CardsRequest
}

func (p *ArticleListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.CardsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleListArgs) Unmarshal(in []byte) error {
	msg := new(article.CardsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleListArgs_Req_DEFAULT *article.CardsRequest

func (p *ArticleListArgs) GetReq() *article.CardsRequest {
	if !p.IsSetReq() {
		return ArticleListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleListResult struct {
	Success *article.CardsResponse
}

var ArticleListResult_Success_DEFAULT *article.CardsResponse

func (p *ArticleListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(article.CardsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleListResult) Unmarshal(in []byte) error {
	msg := new(article.CardsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleListResult) GetSuccess() *article.CardsResponse {
	if !p.IsSetSuccess() {
		return ArticleListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleListResult) SetSuccess(x interface{}) {
	p.Success = x.(*article.CardsResponse)
}

func (p *ArticleListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleListResult) GetResult() interface{} {
	return p.Success
}

func articleDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.DetailRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleDetailArgs:
		success, err := handler.(article.ArticleHandler).ArticleDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleDetailArgs() interface{} {
	return &ArticleDetailArgs{}
}

func newArticleDetailResult() interface{} {
	return &ArticleDetailResult{}
}

type ArticleDetailArgs struct {
	Req *article.DetailRequest
}

func (p *ArticleDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.DetailRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleDetailArgs) Unmarshal(in []byte) error {
	msg := new(article.DetailRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleDetailArgs_Req_DEFAULT *article.DetailRequest

func (p *ArticleDetailArgs) GetReq() *article.DetailRequest {
	if !p.IsSetReq() {
		return ArticleDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleDetailResult struct {
	Success *article.ArticleResponse
}

var ArticleDetailResult_Success_DEFAULT *article.ArticleResponse

func (p *ArticleDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(article.ArticleResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleDetailResult) Unmarshal(in []byte) error {
	msg := new(article.ArticleResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleDetailResult) GetSuccess() *article.ArticleResponse {
	if !p.IsSetSuccess() {
		return ArticleDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*article.ArticleResponse)
}

func (p *ArticleDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleDetailResult) GetResult() interface{} {
	return p.Success
}

func articleViewCountAddHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.Aid)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleViewCountAdd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleViewCountAddArgs:
		success, err := handler.(article.ArticleHandler).ArticleViewCountAdd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleViewCountAddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleViewCountAddArgs() interface{} {
	return &ArticleViewCountAddArgs{}
}

func newArticleViewCountAddResult() interface{} {
	return &ArticleViewCountAddResult{}
}

type ArticleViewCountAddArgs struct {
	Req *article.Aid
}

func (p *ArticleViewCountAddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.Aid)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleViewCountAddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleViewCountAddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleViewCountAddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleViewCountAddArgs) Unmarshal(in []byte) error {
	msg := new(article.Aid)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleViewCountAddArgs_Req_DEFAULT *article.Aid

func (p *ArticleViewCountAddArgs) GetReq() *article.Aid {
	if !p.IsSetReq() {
		return ArticleViewCountAddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleViewCountAddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleViewCountAddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleViewCountAddResult struct {
	Success *common.BaseResponse
}

var ArticleViewCountAddResult_Success_DEFAULT *common.BaseResponse

func (p *ArticleViewCountAddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleViewCountAddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleViewCountAddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleViewCountAddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleViewCountAddResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleViewCountAddResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return ArticleViewCountAddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleViewCountAddResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *ArticleViewCountAddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleViewCountAddResult) GetResult() interface{} {
	return p.Success
}

func articleCollectHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.CollectRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleCollect(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleCollectArgs:
		success, err := handler.(article.ArticleHandler).ArticleCollect(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleCollectResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleCollectArgs() interface{} {
	return &ArticleCollectArgs{}
}

func newArticleCollectResult() interface{} {
	return &ArticleCollectResult{}
}

type ArticleCollectArgs struct {
	Req *article.CollectRequest
}

func (p *ArticleCollectArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.CollectRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleCollectArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleCollectArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleCollectArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleCollectArgs) Unmarshal(in []byte) error {
	msg := new(article.CollectRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleCollectArgs_Req_DEFAULT *article.CollectRequest

func (p *ArticleCollectArgs) GetReq() *article.CollectRequest {
	if !p.IsSetReq() {
		return ArticleCollectArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleCollectArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleCollectArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleCollectResult struct {
	Success *common.BaseResponse
}

var ArticleCollectResult_Success_DEFAULT *common.BaseResponse

func (p *ArticleCollectResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleCollectResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleCollectResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleCollectResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleCollectResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleCollectResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return ArticleCollectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleCollectResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *ArticleCollectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleCollectResult) GetResult() interface{} {
	return p.Success
}

func articleFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.FavoriteRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleFavoriteArgs:
		success, err := handler.(article.ArticleHandler).ArticleFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleFavoriteArgs() interface{} {
	return &ArticleFavoriteArgs{}
}

func newArticleFavoriteResult() interface{} {
	return &ArticleFavoriteResult{}
}

type ArticleFavoriteArgs struct {
	Req *article.FavoriteRequest
}

func (p *ArticleFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.FavoriteRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(article.FavoriteRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleFavoriteArgs_Req_DEFAULT *article.FavoriteRequest

func (p *ArticleFavoriteArgs) GetReq() *article.FavoriteRequest {
	if !p.IsSetReq() {
		return ArticleFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleFavoriteResult struct {
	Success *common.BaseResponse
}

var ArticleFavoriteResult_Success_DEFAULT *common.BaseResponse

func (p *ArticleFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(common.BaseResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleFavoriteResult) Unmarshal(in []byte) error {
	msg := new(common.BaseResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleFavoriteResult) GetSuccess() *common.BaseResponse {
	if !p.IsSetSuccess() {
		return ArticleFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.BaseResponse)
}

func (p *ArticleFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleFavoriteResult) GetResult() interface{} {
	return p.Success
}

func articleExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(article.Aid)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(article.ArticleHandler).ArticleExist(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ArticleExistArgs:
		success, err := handler.(article.ArticleHandler).ArticleExist(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ArticleExistResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newArticleExistArgs() interface{} {
	return &ArticleExistArgs{}
}

func newArticleExistResult() interface{} {
	return &ArticleExistResult{}
}

type ArticleExistArgs struct {
	Req *article.Aid
}

func (p *ArticleExistArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(article.Aid)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ArticleExistArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ArticleExistArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ArticleExistArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ArticleExistArgs) Unmarshal(in []byte) error {
	msg := new(article.Aid)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ArticleExistArgs_Req_DEFAULT *article.Aid

func (p *ArticleExistArgs) GetReq() *article.Aid {
	if !p.IsSetReq() {
		return ArticleExistArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ArticleExistArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ArticleExistArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ArticleExistResult struct {
	Success *article.ArticleExistResponse
}

var ArticleExistResult_Success_DEFAULT *article.ArticleExistResponse

func (p *ArticleExistResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(article.ArticleExistResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ArticleExistResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ArticleExistResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ArticleExistResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ArticleExistResult) Unmarshal(in []byte) error {
	msg := new(article.ArticleExistResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ArticleExistResult) GetSuccess() *article.ArticleExistResponse {
	if !p.IsSetSuccess() {
		return ArticleExistResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ArticleExistResult) SetSuccess(x interface{}) {
	p.Success = x.(*article.ArticleExistResponse)
}

func (p *ArticleExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleExistResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishAction(ctx context.Context, Req *article.PublishRequest) (r *article.PubOrModActionResponse, err error) {
	var _args PublishActionArgs
	_args.Req = Req
	var _result PublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleModifyAction(ctx context.Context, Req *article.ModRequest) (r *article.PubOrModActionResponse, err error) {
	var _args ArticleModifyActionArgs
	_args.Req = Req
	var _result ArticleModifyActionResult
	if err = p.c.Call(ctx, "ArticleModifyAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleDelAction(ctx context.Context, Req *article.DelRequest) (r *common.BaseResponse, err error) {
	var _args ArticleDelActionArgs
	_args.Req = Req
	var _result ArticleDelActionResult
	if err = p.c.Call(ctx, "ArticleDelAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleList(ctx context.Context, Req *article.CardsRequest) (r *article.CardsResponse, err error) {
	var _args ArticleListArgs
	_args.Req = Req
	var _result ArticleListResult
	if err = p.c.Call(ctx, "ArticleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleDetail(ctx context.Context, Req *article.DetailRequest) (r *article.ArticleResponse, err error) {
	var _args ArticleDetailArgs
	_args.Req = Req
	var _result ArticleDetailResult
	if err = p.c.Call(ctx, "ArticleDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleViewCountAdd(ctx context.Context, Req *article.Aid) (r *common.BaseResponse, err error) {
	var _args ArticleViewCountAddArgs
	_args.Req = Req
	var _result ArticleViewCountAddResult
	if err = p.c.Call(ctx, "ArticleViewCountAdd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleCollect(ctx context.Context, Req *article.CollectRequest) (r *common.BaseResponse, err error) {
	var _args ArticleCollectArgs
	_args.Req = Req
	var _result ArticleCollectResult
	if err = p.c.Call(ctx, "ArticleCollect", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleFavorite(ctx context.Context, Req *article.FavoriteRequest) (r *common.BaseResponse, err error) {
	var _args ArticleFavoriteArgs
	_args.Req = Req
	var _result ArticleFavoriteResult
	if err = p.c.Call(ctx, "ArticleFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ArticleExist(ctx context.Context, Req *article.Aid) (r *article.ArticleExistResponse, err error) {
	var _args ArticleExistArgs
	_args.Req = Req
	var _result ArticleExistResult
	if err = p.c.Call(ctx, "ArticleExist", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

syntax = "proto3";
package http.comment;
import "http/common.proto";
import "http/favorite.proto";
import "http/api.proto";
import "http/user.proto";
option go_package = "http/interact/comment";

message Comment {
  string cid=1;
  string aid=2; //文章的id
  user.UserBase user =3; // comment user information
  string content = 4; // comment
  string create_date = 5; // comment publication date, format mm-dd
  int64 favorite_count =6;//该评论获得的点赞数量
  int64 child_num=7;//该评论被回复的数量，当为一级评论时候，显示数量，二级的时候，显示为0
  string replied_uid=8;//如果该评论为某评论的回复，则该字段为被回复的用户的hashID
  bool is_favorite=9;
}
message CmtRequest {
  string pid =1[(api.go_tag)='json:"pid"'];;//父亲评论的id
  string aid=2[(api.go_tag)='json:"aid"']; //文章的id
  string content=3[(api.go_tag)='json:"content,required"'];//评论内容
  int32 degree=4[(api.go_tag)='json:"degree,required"',(api.vd)='$==1 || $==2']; //评论等级，只能为1或者2
}
message DelRequest{
  string cid=1[(api.go_tag)='json:"cid"'];//评论id or "null"
  string aid=2[(api.go_tag)='json:"aid"'];
  int32 type=3[(api.go_tag)='json:"type,required"',(api.vd)='$==1 || $==2'];//1:删除文章所有评论 2:删除该评论以及所有子评论
}
message CardsRequest {
  string aid=1[(api.go_tag)='json:"aid,required"'];
  string cid=2[(api.go_tag)='json:"cid,required"'];
  int32 degree=3[(api.go_tag)='json:"degree,required"',(api.vd)='$==1 || $==2'];//1:请求一级评论 2：请求二级评论
  int32 reqType=4[(api.go_tag)='json:"req_type,required"',(api.vd)='$==1 || $==2'];//1.根据热度 2.根据时间先后
  string myUid=5[(api.go_tag)='json:"my_uid,required"'];
}
message CardsResponse {
  common.BaseResponse base=1;
  repeated Comment list = 2; // return comment list
}
message CmtActionResponse {
  common.BaseResponse base=1;
  string cid=2;
}
service CommentHandler {
  rpc CommentAction(CmtRequest) returns(comment.CmtActionResponse) {
    option (api.post) = "/publish/comment";
  }
  rpc CommentDelAction(DelRequest) returns(common.BaseResponse){
    option (api.delete) = "/publish/comment";
  }
  rpc CommentList(CardsRequest) returns(comment.CardsResponse) {
    option (api.post) = "/publish/comment/list";
  }
  rpc CommentFavorite(favorite.FavoriteRequest) returns(common.BaseResponse) {
    option (api.post) = "/publish/comment/favorite";
  }
}

